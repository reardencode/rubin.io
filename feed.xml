<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://rubin.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://rubin.io/" rel="alternate" type="text/html" /><updated>2024-11-26T21:15:01+00:00</updated><id>http://rubin.io/feed.xml</id><title type="html">Jeremy Rubin</title><subtitle>Bitcoin, Hardware, FP, ML, Crypto @ MIT</subtitle><author><name>Jeremy Rubin</name></author><entry><title type="html">Un-FE’d Covenants</title><link href="http://rubin.io/bitcoin/2024/11/26/unfed-covenants/" rel="alternate" type="text/html" title="Un-FE’d Covenants" /><published>2024-11-26T00:00:00+00:00</published><updated>2024-11-26T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2024/11/26/unfed-covenants</id><content type="html" xml:base="http://rubin.io/bitcoin/2024/11/26/unfed-covenants/">&lt;p&gt;Covenants in Bitcoin represent a method to restrict how and where coins can
move. Functional Encryption (FE) offers an exciting avenue to implement
covenants without native protocol changes. However, FE remains impractical with
current cryptographic tools. In this work, we propose a practical
implementation using an oracle-assisted model that combines off-chain
computation, key management, and a BitVM-style economic incentive structure
to enforce covenants without requiring a Bitcoin soft fork.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/public/pdfs/unfedcovenants.pdf&quot;&gt;Read the full paper.&lt;/a&gt;&lt;/p&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Covenants in Bitcoin represent a method to restrict how and where coins can move. Functional Encryption (FE) offers an exciting avenue to implement covenants without native protocol changes. However, FE remains impractical with current cryptographic tools. In this work, we propose a practical implementation using an oracle-assisted model that combines off-chain computation, key management, and a BitVM-style economic incentive structure to enforce covenants without requiring a Bitcoin soft fork. Read the full paper.</summary></entry><entry><title type="html">FE’d Up Covenants</title><link href="http://rubin.io/bitcoin/2024/05/29/fed-up-covenants/" rel="alternate" type="text/html" title="FE’d Up Covenants" /><published>2024-05-29T00:00:00+00:00</published><updated>2024-05-29T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2024/05/29/fed-up-covenants</id><content type="html" xml:base="http://rubin.io/bitcoin/2024/05/29/fed-up-covenants/">&lt;p&gt;Covenants are a way of expressing restrictions on Bitcoin. Covenants, while
possible to implement as an extension to Bitcoin, do not exist natively. To
enable them requires the Bitcoin community to agree upon upgrades such as CTV,
CAT, CSFS, and more.  This paper serves to demonstrate at a high level how
covenants could be introduced to Bitcoin without a soft fork using Functional
Encryption and Zero Knowledge Proofs.
&lt;a href=&quot;/public/pdfs/fedcov.pdf&quot;&gt;Read the full paper.&lt;/a&gt;&lt;/p&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Covenants are a way of expressing restrictions on Bitcoin. Covenants, while possible to implement as an extension to Bitcoin, do not exist natively. To enable them requires the Bitcoin community to agree upon upgrades such as CTV, CAT, CSFS, and more. This paper serves to demonstrate at a high level how covenants could be introduced to Bitcoin without a soft fork using Functional Encryption and Zero Knowledge Proofs. Read the full paper.</summary></entry><entry><title type="html">Spookchains: Drivechain Analog with Trusted Setup &amp;amp; APO</title><link href="http://rubin.io/bitcoin/2022/09/14/drivechain-apo/" rel="alternate" type="text/html" title="Spookchains: Drivechain Analog with Trusted Setup &amp;amp; APO" /><published>2022-09-14T00:00:00+00:00</published><updated>2022-09-14T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2022/09/14/drivechain-apo</id><content type="html" xml:base="http://rubin.io/bitcoin/2022/09/14/drivechain-apo/">&lt;p&gt;This post draws heavily from &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019976.html&quot;&gt;Zmnscpxj’s fantastic
post&lt;/a&gt;
showing how to make drivechains with recursive covenants. In this post, I will
show similar tricks that can accomplish something similar using ANYPREVOUT with
a one time trusted setup ceremony.&lt;/p&gt;

&lt;p&gt;This post presents general techniques that could be applied to many
different types of covenant.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;note: I originally wrote this around May 5th, 2022, and shared it with a
limited audience&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/spookchain.png&quot; alt=&quot;Spooky Chains&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;peano-counters&quot;&gt;Peano Counters&lt;/h1&gt;

&lt;p&gt;The first component we need to build is a Peano counter graph. Instead
of using sha-256, like in Zmnscpxj’s scheme, we will use a key and
build a simple 1 to 5 counter that has inc / dec.&lt;/p&gt;

&lt;p&gt;Assume a key K1…K5, and a point NUMS which is e.g.
HashToCurve(“Spookchains”).&lt;/p&gt;

&lt;p&gt;Generate scripts as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;1 || K1&amp;gt; CHECKSIG
...
&amp;lt;1 || K5&amp;gt; CHECKSIG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now generate 2 signatures under Ki with flags &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGHASH_SINGLE |
SIGHASH_ANYONECANPAY | SIGHASH_ANYPREVOUT&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;rule-increment&quot;&gt;Rule Increment&lt;/h2&gt;
&lt;p&gt;For each Ki, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i &amp;lt; 5&lt;/code&gt;, create a signature that covers a
transaction described as:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K{i+1}&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rule-decrement&quot;&gt;Rule Decrement&lt;/h2&gt;
&lt;p&gt;For each Ki, when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i &amp;gt; 1&lt;/code&gt; The second signature should cover:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K{i-1}&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Are these really Peano?&lt;/em&gt; Sort of. While a traditional Peano numeral
is defined as a structural type, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Succ(Succ(Zero))&lt;/code&gt;, here we
define them via a Inc / Dec transaction operator, and we have to
explicitly bound these Peano numbers since we need a unique key per
element. They’re at least spiritually similar.&lt;/p&gt;

&lt;h2 id=&quot;instantiation&quot;&gt;Instantiation&lt;/h2&gt;
&lt;p&gt;Publish a booklet of all the signatures for the Increment and
Decrement rules.&lt;/p&gt;

&lt;p&gt;Honest parties should destroy the secret key sets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To create a counter, simply spend to output C:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K1&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The signature from K1 can be bound to C to ‘transition’ it to (+1):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K2&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which can then transition to (+1):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K3&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Which can then transition (-1) to:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Amount: 1 satoshi
Key: Tr(NUMS, {&amp;lt;1 || K2&amp;gt; CHECKSIG})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This can repeat indefinitely.&lt;/p&gt;

&lt;p&gt;We can generalize this technique from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1...5&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1...N&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;handling-arbitrary-deposits--withdrawals&quot;&gt;Handling Arbitrary Deposits / Withdrawals&lt;/h1&gt;

&lt;p&gt;One issue with the design presented previously is that it does not
handle arbitrary deposits well.&lt;/p&gt;

&lt;p&gt;One simple way to handle this is to instantiate the protocol for every
amount you’d like to support.&lt;/p&gt;

&lt;p&gt;This is not particularly efficient and requires a lot of storage
space.&lt;/p&gt;

&lt;p&gt;Alternatively, divide (using base 2 or another base) the deposit
amount into a counter utxo per bit.&lt;/p&gt;

&lt;p&gt;For each bit, instead of creating outputs with 1 satoshi, create
outputs with 2^i satoshis.&lt;/p&gt;

&lt;p&gt;Instead of using keys &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K1...KN&lt;/code&gt;, create keys &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, where i
represents the number of sats, and j represents the counter. Multiple
keys are required per amount otherwise the signatures would be valid
for burning funds.&lt;/p&gt;

&lt;h2 id=&quot;splitting-and-joining&quot;&gt;Splitting and Joining&lt;/h2&gt;

&lt;p&gt;For each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, it may also be desirable to allow splitting or
joining.&lt;/p&gt;

&lt;p&gt;Splitting can be accomplished by pre-signing, for every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i!=0&lt;/code&gt;, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGHASH_ALL | SIGHASH_ANYPREVOUT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Input: 2^i sats with key K^i_j
Outputs: 
    - 2^i-1 sats to key K^{i-1}_j
    - 2^i-1 sats to key K^{i-1}_j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Joining can be accomplished by pre-signing, for every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, where
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i!=MAX&lt;/code&gt;, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGHASH_ALL | SIGHASH_ANYPREVOUT&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Inputs:
    - 2^i sats with key K^i_j
    - 2^i sats with key K^i_j
Outputs: 
    - 2^i+1 sats to key K^{i+1}_j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;N.B.: Joining allows for third parties to deposit money in externally,
that is not a part of the covenant.&lt;/p&gt;

&lt;p&gt;The splitting and joining behavior means that spookchain operators
would be empowered to consolidate UTXOs to a smaller number, while
allowing arbitrary deposits.&lt;/p&gt;

&lt;h1 id=&quot;one-vote-per-block&quot;&gt;One Vote Per Block&lt;/h1&gt;

&lt;p&gt;To enforce that only one vote per block mined is allowed, ensure that
all signatures set the input sequence to 1 block. No CSV is required
because nSequence is in the signatures already.&lt;/p&gt;

&lt;h1 id=&quot;terminal-states--thresholds&quot;&gt;Terminal States / Thresholds&lt;/h1&gt;

&lt;p&gt;When a counter reaches the Nth state, it represents a certain amount
of accumulated work over a period where progress was agreed on for
some outcome.&lt;/p&gt;

&lt;p&gt;There should be some viable state transition at this point.&lt;/p&gt;

&lt;p&gt;One solution would be to have the money at this point sent to an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_TRUE&lt;/code&gt; output, which the miner incrementing that state is
responsible for following the rules of the spookchain. Or, it could be
specified to be some administrator key / federation for convenience,
with a N block timeout that degrades it to fewer signers (eventually
0) if the federation is dead to allow recovery.&lt;/p&gt;

&lt;p&gt;This would look like, from any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_j&lt;/code&gt;, a signature for a transaction
putting it into an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_TRUE&lt;/code&gt; and immediately spending it. Other
spookchain miners would be expected to orphan that miner otherwise.&lt;/p&gt;

&lt;h1 id=&quot;open-states--proposals&quot;&gt;Open States / Proposals&lt;/h1&gt;

&lt;p&gt;From a state &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_1&lt;/code&gt;, the transaction transitioning to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K^i_2&lt;/code&gt; can be
treated as ‘special’ and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OP_RETURN&lt;/code&gt; output type can be used to
commit to, e.g., the outputs that must be created in when the Terminal
State is reached. This clarifies the issue of “what is being voted
on”.&lt;/p&gt;

&lt;p&gt;This method does not &lt;em&gt;lock in&lt;/em&gt; at a consensus layer what Terminal
State is being voted on.&lt;/p&gt;

&lt;p&gt;In certain circumstances, without violating the one-time-setup
constraint, if a fixed list of withdrawer’s addresses is known in
advance, the Open States could cover withdrawals to specific
participants, which then must collect a certain number of votes from
miners.  However, it seems impossible, without new primitives, for an
arbitrary transaction proposal to be voted on.&lt;/p&gt;

&lt;h1 id=&quot;setup-variants&quot;&gt;Setup Variants&lt;/h1&gt;

&lt;h2 id=&quot;xpubs&quot;&gt;xpubs&lt;/h2&gt;

&lt;p&gt;Instead of using randomly generated keys for each state, define each
to be an xpub and derive a path where it is k/i/j for each
state/satoshi amount. This saves some data, and also requires less
entropy.&lt;/p&gt;

&lt;h3 id=&quot;trustless-data-commit&quot;&gt;Trustless Data Commit:&lt;/h3&gt;

&lt;p&gt;commit to the hash of the entire program spec as a tweak to the xpub,
so that someone can quickly verify if they have all the signatures you
are expected to generate if honest.&lt;/p&gt;

&lt;p&gt;One way to do this is to convert a hash to a list of HD Child Numbers
(9 of them) deterministically, and tweak the xpub by that. This is a
convenient, yet inefficient, way to tweak an xpub because the child
has a normal derivation path for signing devices.&lt;/p&gt;

&lt;h2 id=&quot;single-party&quot;&gt;Single Party&lt;/h2&gt;

&lt;p&gt;A single party pre-signs all the transactions for the spookchain, and
then deletes their xpriv.&lt;/p&gt;

&lt;p&gt;You trust them to have deleted the key, and signed properly, but you
do not trust whoever served you the spookchain blob to have given you
all the state transitions because of the trustless data commitment.&lt;/p&gt;

&lt;h2 id=&quot;musig-multi-party&quot;&gt;MuSig Multi-Party&lt;/h2&gt;

&lt;p&gt;Define a MuSig among all participants in the setup ceremony, N-of-N.&lt;/p&gt;

&lt;p&gt;Now you simply trust that any one person in the one-time-setup was
honest! Very good.&lt;/p&gt;

&lt;h2 id=&quot;unaggregated-multi-party&quot;&gt;Unaggregated Multi-Party&lt;/h2&gt;

&lt;p&gt;Allow for unaggregated multi-sig keys in the spec. This grows with
O(signers), however, it means that a-la-carte you can aggregate setups
from random participants who never interacted / performed setup
ceremonies independently if they signed the same specs.&lt;/p&gt;

&lt;p&gt;Can also combine multiple MuSig Multi-Parties in this way.&lt;/p&gt;

&lt;p&gt;This is nice because MuSig inherently implies the parties colluded at
one point to do a MuSig setup, whereas unaggregated multi-sig could be
performed with no connectivity between parties.&lt;/p&gt;

&lt;h2 id=&quot;soft-forking-away-trust&quot;&gt;Soft Forking Away Trust&lt;/h2&gt;

&lt;p&gt;Suppose a spookchain becomes popular. You could configure your client
to reject invalid state transitions, or restrict the spookchain keys
to only sign with the known signatures. This soft fork would smoothly
upgrade the trust assumption.&lt;/p&gt;

&lt;h2 id=&quot;symmetry-of-state-transition-rules--dag-covenants&quot;&gt;Symmetry of State Transition Rules &amp;amp; DAG Covenants&lt;/h2&gt;

&lt;p&gt;We could have our increment state transitions be done via a trustless
covenant, and our backwards state transitions be done via the setup.&lt;/p&gt;

&lt;p&gt;This would look something like the following for state i:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Tr(NUMS, {
    `&amp;lt;sig for state K_{i+1}&amp;gt; &amp;lt;1 || PK_nonsecret&amp;gt; CHECKSIG`,
    `&amp;lt;1 || Ki&amp;gt; CHECKSIG`
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The advantage of such an optimization is theoretically nice because it
means that &lt;em&gt;only&lt;/em&gt; the non-destructuring recursive part of the
computation is subject to the one-time-setup trust assumption, which
might be of use in various other protocols, where recursivity might
only be unlocked e.g. after a timeout (but for spookchains it is used
at each step).&lt;/p&gt;

&lt;p&gt;A compiler writer might perform this task by starting with an arbitrary
abstract graph, and then removing edges selectively (a number of heuristics may
make sense, e.g., to minimize reliance on one-time-setup or minimize costs)
until the graph is a Directed Acyclic Graph, consisting of one or more
components, compiling those with committed covenants, and then adding the
removed edges back using the one-time-setup key materials.&lt;/p&gt;

&lt;h1 id=&quot;commentary-on-trust-and-covenantiness&quot;&gt;Commentary on Trust and Covenantiness&lt;/h1&gt;

&lt;p&gt;Is this a covenant? I would say “yes”. When I defined covenants in my
&lt;em&gt;Calculus of Covenants&lt;/em&gt; post, it was with a particular set of
assumptions per covenant.&lt;/p&gt;

&lt;p&gt;Under that model, you could, e.g., call a 7-10 multi-sig with specific
committed instructions as 4-10 honest (requires 4 signatories to be
honest to do invalid state transition) and 4-10 killable (requires 4
signatories to die to have no way of recovering).&lt;/p&gt;

&lt;p&gt;For emulations that are pre-signed, like the varieties used to emulate
CTV, it is a different model because if your program is correct and
you’ve pre-gotten the signatures for N-N it is 1-N honest (only 1
party must be honest to prevent an invalid state transition) and
unkillable (all parties can safely delete keys).&lt;/p&gt;

&lt;p&gt;I model these types of assumptions around liveness and honesty as
different ‘complexity classes’ than one another.&lt;/p&gt;

&lt;p&gt;What I would point out is that with the counter model presented above,
this is entirely a pre-signed 1-N honest and unkillable covenant that
requires no liveness from signers. Further, with APO, new instances of
the covenant do not require a new set of signers, the setup is truly
one-time. Therefore this type of covenant exists in an even lower
trust-complexity class than CTV emulation via presigneds, which
requires a new federation to sign off on each contract instance.&lt;/p&gt;

&lt;p&gt;With that preface, let us analyze this covenant:&lt;/p&gt;

&lt;p&gt;1) A set of sets of transaction intents (a family), potentially
recursive or co-recursive (e.g., the types of state transitions that
can be generated).  These intents can also be represented by a
language that generates the transactions, rather than the literal
transactions themselves. We do the family rather than just sets at
this level because to instantiate a covenant we must pick a member of
the family to use.&lt;/p&gt;

&lt;p&gt;The set of sets of transaction intents is to increment / decrement to
a successor or predecessor, or to halve into two instances or double
value by adding funds. Each successor or predecessor is the same type
of covenant, with the excetion of the first and last, which have some
special rules.&lt;/p&gt;

&lt;p&gt;2) A verifier generator function that generates a function that
accepts an intent that is any element of one member of the family of
intents and a proof for it and rejects others.&lt;/p&gt;

&lt;p&gt;The verifier generator is the simple APO CHECKSIG script.&lt;/p&gt;

&lt;p&gt;3) A prover generator function that generates a function that takes an
intent that is any element of one member of the family and some extra
data and returns either a new prover function, a finished proof, or a
rejection (if not a valid intent).&lt;/p&gt;

&lt;p&gt;The prover generator is the selection of the correct signature from a
table for a given script.&lt;/p&gt;

&lt;p&gt;Run the prover generator with the private keys present &lt;em&gt;once&lt;/em&gt; to
initialize over all reachable states, and cache the signatures, then
the keys may be deleted for future runs.&lt;/p&gt;

&lt;p&gt;4) A set of proofs that the Prover, Verifier, and a set of intents are
“impedance matched”, that is, all statements the prover can prove and
all statements the verifier can verify are one-to-one and onto (or
something similar), and that this also is one-to-one and onto with one
element of the intents (a set of transactions) and no other.&lt;/p&gt;

&lt;p&gt;At a given key state the only things that may happen are signed
transactions, no other data is interpreted off of the stack. Therefore
there is perfect impedance match.&lt;/p&gt;

&lt;p&gt;5) A set of assumptions under which the covenant is verified (e.g., a
multi-sig covenant with at least 1-n honesty, a multisig covenant with
any 3-n honesty required, Sha256 collision resistance, Discrete Log
Hardness, a SGX module being correct).&lt;/p&gt;

&lt;p&gt;Uniquely, that during the setup phase at least one of the keys
were faithfully deleted.&lt;/p&gt;

&lt;p&gt;The usual suspects for any bitcoin transaction are also assumed for
security.&lt;/p&gt;

&lt;p&gt;6) Composability:&lt;/p&gt;

&lt;p&gt;The Terminal State can pay out into a pre-specified covenant if
desired from any other family of covenants.&lt;/p&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">This post draws heavily from Zmnscpxj’s fantastic post showing how to make drivechains with recursive covenants. In this post, I will show similar tricks that can accomplish something similar using ANYPREVOUT with a one time trusted setup ceremony.</summary></entry><entry><title type="html">7 Theses on a next step for BIP-119</title><link href="http://rubin.io/bitcoin/2022/04/17/next-steps-bip119/" rel="alternate" type="text/html" title="7 Theses on a next step for BIP-119" /><published>2022-04-17T00:00:00+00:00</published><updated>2022-04-17T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2022/04/17/next-steps-bip119</id><content type="html" xml:base="http://rubin.io/bitcoin/2022/04/17/next-steps-bip119/">&lt;p&gt;&lt;em&gt;Warning: this post assumes a great deal of context on CTV is already
understood by the reader.  If you are not familiar, you may wish to start with
&lt;a href=&quot;https://utxos.org&quot;&gt;utxos.org&lt;/a&gt;, &lt;a href=&quot;https://rubin.io/advent21&quot;&gt;the advent
calendar&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki&quot;&gt;BIP-119
text&lt;/a&gt; and
&lt;a href=&quot;https://github.com/bitcoin/bitcoin/pull/21702&quot;&gt;reference implementation&lt;/a&gt;, as
those may provide much needed context about what CTV is and why a next step is
being discussed. If you only have a little time, minimally I would advise these
two from the advent calendar as the minimum required context: &lt;a href=&quot;https://rubin.io/bitcoin/2021/12/05/advent-8/&quot;&gt;Contracting
Primitives and Upgrades to
Bitcoin&lt;/a&gt; and &lt;a href=&quot;https://rubin.io/bitcoin/2021/12/24/advent-27/&quot;&gt;RoadMap or Load o’
Crap?&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post starts with a conclusion:&lt;/p&gt;

&lt;p&gt;Within a week from today, you’ll find software builds for a CTV Bitcoin Client
for all platforms linked here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mac OSX TODO:&lt;/li&gt;
  &lt;li&gt;Windows TODO:&lt;/li&gt;
  &lt;li&gt;Linux TODO:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will be built using GUIX, which are reproducible for verification.  The
intended code to be built will be
https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-v23.0rc5-paramsv0
which is based on Bitcoin Core v23.0 release candidate 5, with commit hash
dd9a4e0ea8a109d1607ca1ec16119b1bc952d8b0. You can begin testing this
immediately, and even producing your own GUIX builds as well.&lt;/p&gt;

&lt;p&gt;Signatures for the builds will be available below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TODO: … .asc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source tarball:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TODO: … .tar.gz&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The client has a Speedy Trial release similar to Taproots with parameters
proposed to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Signal Start MTP: 1651708800 (May 5th, 2022, 00:00 UTC)&lt;/li&gt;
  &lt;li&gt;Signal Timeout MTP: 1660262400 (August 12th, 2022, 00:00 UTC)&lt;/li&gt;
  &lt;li&gt;Activation Height: 762048 (Approximately Nov 9th)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the appendix to verify these parameters.&lt;/p&gt;

&lt;p&gt;This ensures 6 signalling periods to activate CTV. The Start and Timeout are
targeting mid-period (if hashrate stays steady) times to ensure that it is
unlikely we would have more or fewer periods.&lt;/p&gt;

&lt;p&gt;The week delay between this post and builds is to provide time for review on
the selection of parameters as well as ability to rebase onto a final v23.0
release, should it become ready within the week. Backports are in the works for
v22.0, but release builds may not be made available as Bitcoin’s release build
processes have changed since v22.0 to use GUIX. The branch for backports is
available here:
https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-v22.0 with
current commit hash 4d2c39314834a28cd46da943a12300cca8ffcb10, if you would like
to help with testing.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-this-why-now&quot;&gt;Why this, why now?&lt;/h2&gt;

&lt;p&gt;I’ve just returned from the Bitcoin Miami “Bacchanal”. Personally, I had a
couple different goals for being there&lt;sup id=&quot;fnref:skate&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:skate&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. One of my primary focuses was
on talking to as many people as possible about BIP-119 and the future road to
take.&lt;/p&gt;

&lt;p&gt;While consensus has to happen among a much broader set of people than can fit
in a conference in Miami, the reality is that there were more than 20,000
Bitcoiners at this event and a good representation across industry, developers,
journalists, podcasters, plebs, whales, pool operators, miners, venture
capitalists, and more. To say it was a representative sample wouldn’t be fair,
but it certainly was not a homogeneous crowd. And I spoke to as many people as
I could.&lt;/p&gt;

&lt;p&gt;There were a couple common threads across the feedback I received:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Agree or disagree with CTV in particular, folks generally liked how/that I
was driving a conversation forward, and respected the hustle required to do
so.&lt;/li&gt;
  &lt;li&gt;A lot of people felt that CTV would help them in a tangible way, and more
than a few times, individuals approached me with a concrete use case they
&lt;em&gt;needed&lt;/em&gt; but had not fully written it up yet.&lt;/li&gt;
  &lt;li&gt;A lot of people wanted to know what the next step was and what I was
planning to do to get it activated and when.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some people had some suggestions on what I should do as a next step:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Some folks said I should just do a UASF and rally the users.&lt;/li&gt;
  &lt;li&gt;Some said I needed to organize a summit for developers to explore covenants&lt;sup id=&quot;fnref:pleb&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:pleb&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
  &lt;li&gt;Some said I didn’t need to do a UASF, nor advocate for it, but I &lt;em&gt;did&lt;/em&gt; need
to decide on exact release parameters and distribute a reproducible binary
so that it was clear what should be run and when so that end-to-end
activation testing could proceed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It’s (un?)remarkably difficult to integrate all feedback on a complex topic
like a Bitcoin upgrade coherently. But, having thought it through, I decided
that the approach above was the correct next step. Below, you’ll find some
reasoning on why I believe this to be proper and not out-of-line with how soft-fork
development should go.&lt;/p&gt;

&lt;p&gt;However, if I’m wrong &lt;em&gt;in your view&lt;/em&gt;, consider me a mere messenger and &lt;em&gt;please
don’t shoot the messenger&lt;/em&gt;. You just need to communicate clearly to the
community why they should &lt;em&gt;not&lt;/em&gt; run and signal for CTV and I’m confident that
the wisdom of the consensus set will decide in it’s best interests.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So why ship a binary and release parameters?&lt;/p&gt;

&lt;h1 id=&quot;1-ctv-passes-a-basic-pre-flight-checklist&quot;&gt;1) CTV passes a basic pre-flight checklist.&lt;/h1&gt;

&lt;p&gt;This discussion has to start anchored in a “pre-flight checklist” for CTV.
These are fundamental questions that we should be able to tick boxes for for
&lt;em&gt;any&lt;/em&gt; proposed upgrade…  Sadly, the community at large doesn’t have a
codified checklist&lt;sup id=&quot;fnref:doit&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:doit&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, but personally I tick off the following boxes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No material changes to the BIP/Spec/Ref Impl necessary for ~2 years (beyond rebases).&lt;/li&gt;
  &lt;li&gt;A reasonably well reviewed and tested PR-implementation exists.&lt;/li&gt;
  &lt;li&gt;~5 Months of a 5.5 BTC Bounty for bugs in CTV&lt;/li&gt;
  &lt;li&gt;I socialized a similar
&lt;a href=&quot;https://rubin.io/bitcoin/2021/12/24/advent-27/&quot;&gt;roadmap&lt;/a&gt; 5 months ago,
which received a reasonably warm response so there are ‘few surprises’ here
against previously communicated intent.&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://utxos.org/signals&quot;&gt;community&lt;/a&gt; of supporters: breakdown, 16
supporting orgs, 109 individuals, 3 mining pools (totalling about 15-18%
depending on when you look).&lt;/li&gt;
  &lt;li&gt;Only 3 individual NACKs + 1 org (owned by one
of the individuals).
You should read them yourself, but I think the NACKs are summarizable as “it’s
too soon” and “there should be a different process” rather than “I have
identified a flaw in the proposal”. See section 4 for more on this.
 The NACKs are linked below:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/issues/27&quot;&gt;Michael Folkson&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/issues/28&quot;&gt;John Carvalho/Synonym&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/JeremyRubin/utxos.org/issues/39&quot;&gt;Dr M Robotix&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ample time to have produced a nack with a technical basis.&lt;/li&gt;
  &lt;li&gt;7 regular meetings over ~16 weeks to discuss the upgrade.&lt;/li&gt;
  &lt;li&gt;There exists software from multiple different parties for using CTV to
accomplish various tasks. None of these users have uncovered issue or difficulty
with CTV.&lt;/li&gt;
  &lt;li&gt;Many in the community are arguing for &lt;em&gt;more&lt;/em&gt; functionality than what CTV
offers, rather than that the functionality of CTV might be unsafe. CTV ends up
being close to a subset of functionality offered by these upgrades.&lt;/li&gt;
  &lt;li&gt;CTV does not impose a substantial validation burden and is designed carefully to
not introduce any Denial of Service vectors.&lt;/li&gt;
  &lt;li&gt;There exists a Signet with CTV active where people have been able to experiment.&lt;/li&gt;
  &lt;li&gt;Backports for current release and prior release (will be) available.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;2-unforced-errors&quot;&gt;2) Unforced errors&lt;/h1&gt;

&lt;p&gt;In tennis, an unforced error is a type of lost point where a player loses
because of their own mistake. For example, suppose your opponent shoots a shot
that’s a lob high in the air and slow. But it looks like it’s going out, so you
do a little victory dance only to uncover that… the ball lands in. You had enough
time to get to the ball, but you chose not to because you didn’t think it would
go in. Contrast this to a forced error – your opponent hits a shot so hard and
fast across the court no human could reach it let alone return it&lt;sup id=&quot;fnref:winner&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:winner&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;What’s this got to do with Bitcoin?&lt;/p&gt;

&lt;p&gt;Community consensus is the ball, and we don’t know if by August it will be in
or out.&lt;/p&gt;

&lt;p&gt;Getting to where the ball might land is preparing a software artifact that can
activate.&lt;/p&gt;

&lt;p&gt;If an artifact isn’t prepared that does this, even if community consensus is
ready by then, it’s an unforced error that it wasn’t ready which precludes us
from being live in August.&lt;/p&gt;

&lt;p&gt;When should you avoid an unforced error like this? When the cost of getting to
the ball is sufficiently small.&lt;/p&gt;

&lt;p&gt;I’m already maintaining a backportable to Bitcoin Core 23 and 22 patchset for
CTV. It’s not much work to set parameters and do a release.&lt;/p&gt;

&lt;p&gt;Which brings us to…&lt;/p&gt;

&lt;h1 id=&quot;3-product-management-is-not-my-job--its-yours&quot;&gt;3) Product Management is not “my Job” – it’s yours.&lt;/h1&gt;

&lt;p&gt;Devs don’t swing the racquet, we get to the ball. It’s the community’s job to
decide to swing or not. One might rebutt this point – the community isn’t well
informed to make that call, but fortunately devs and other tuned in individuals
can serve as “coaches” to the public and advise on if the swing should happen.&lt;/p&gt;

&lt;p&gt;Producing the code, the tools, the reviews, the builds, the dates, these are all
getting to the ball activities.&lt;/p&gt;

&lt;p&gt;It’s possible that as a developer, one could say that we should not get to the ball
unless we know the community wants to swing.&lt;/p&gt;

&lt;p&gt;But that’s false. What if the community wants to take a swing at it but
developers haven’t gotten to the ball? What if developers &lt;em&gt;refuse&lt;/em&gt; to get to the
ball because they don’t want the community to take that shot? Well, tennis can
be a game of doubles (I’m really sticking with this metaphor), and maybe your
teammate – the community itself – strives to go for it and sprints cross court
to make up and take a shot. Maybe that shot looks like a UASF, maybe it looks
like a hard fork, maybe it’s lower quality since there was less time to make the
right shot placement (worse code if usual devs don’t review). But ultimately,
the economic majority is what backstops this, the devs just have the
opportunity to help it along, perhaps, a little smoother.&lt;/p&gt;

&lt;p&gt;Largely, the formal critiques of CTV (the 3 NACKs) are based on topics of
whether or not to swing the racquet, not if we should be at the ball.
&lt;em&gt;There are other critiques as well, about the generality of the upgrade, but
we’ll discuss those later in this post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ll excerpt some quotes from the NACKs below:&lt;/p&gt;

&lt;p&gt;Michael writes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I also think attempting regular soft forks with single features is a
disturbing pattern to get into having just activated Taproot. As I say in the
linked post it means less and less community scrutiny of consensus changes, it
becomes a full time job to monitor the regular soft forks being activated (or
attempting to be activated) and only a tiny minority of the community can
dedicate the time to do that.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So this seems to be a point largely about product management – we should only
take a shot when we can line up more than once, due to the cost of swinging the
racquet. Not really my job, it’s the communities.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hence I’d like to register a “No” soft signal as I fundamentally disagree that a
CTV soft fork should be attempted in the near future and my concerns over
premature activation outweigh my enthusiasm for digging into the speculated real
world use cases of CTV.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you disagree that it should be attempted, that’s fine. Your time to voice
your concerns is in making the swing.&lt;/p&gt;

&lt;p&gt;John writes,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Generally, I do not think Bitcoin is ready for any new soft forked features at
all in the short term. Taproot just arrived and there is already so much work to
be done to adopt and utilize it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a product management point. “Work on feature X should block all work on
other features”. It’s not a point on if CTV is a feature of independent merit.&lt;/p&gt;

&lt;p&gt;Further, it’s a layer violation. Wallet progress is wholly independent of
consensus upgrades, and generally, we don’t operate on a waterfall development
model.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Any improvements CTV-eltoo may bring to LN are not significant enough to claim
they are urgent for adoption or R&amp;amp;D for LN progress and adoption.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, a product management point. How do we measure what is important to the
Lightning Community?  Oh, on &lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org&lt;/a&gt;, there are
multiple Lightning Network companies and individuals (Lightning Labs, Muun
Wallet, Roasbeef, ZmnSCPxj, LN Markets, Breez, fiatjaf, and more). So if &lt;em&gt;that&lt;/em&gt;
represents the community, then it seems like a greenlight.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Since I am not qualified, nor are 99% of Bitcoiners, to evaluate this deeply,
I feel much more time and scrutiny is required to accept CTV and the related
projects Jeremy has prepared with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If you’re not qualified, remind me why we’re listening?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sorry, I couldn’t help the snark. Graciously, let’s accept the framing for a
second – who are the stakeholders who need to sign off? What is this process
like, concretely?&lt;/p&gt;

&lt;p&gt;Is this a process that happens before or after we ‘get to the ball’?&lt;/p&gt;

&lt;p&gt;It can definitely be after we get to the ball, and the decision to swing or not
is a bit too product-management-y for how a dev should engage.&lt;/p&gt;

&lt;p&gt;Also, related projects are a bit like the mix-ins at Cold Stone Creamery™. You
are free, of course, to just get ice cream! That there are a myriad of uses
doesn’t mean you need to accept all of them, it’s sufficient to just consider
the one or two you care about.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am currently happy with what we have in Bitcoin, and would prefer Core
development prioritize optimizations and cleanup work over more and more
features that have no urgent need or chance of adoption anytime soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This belies a basic misunderstanding of FLOSS:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;People work on what they want to&lt;/li&gt;
  &lt;li&gt;CTV is already ‘finished’&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A non-dev’s preference to spend time on cleanup or optimization doesn’t make
any dev write that code or shift focus. Most core devs don’t have a boss, and
if they do, it’s probably not you! It’s structurally impossible to direct the
attention of developers.&lt;/p&gt;

&lt;p&gt;And it so happens that &lt;em&gt;I&lt;/em&gt; am not happy with what we have in Bitcoin, so I did
something about it. With respect to adoption,  people will likely be using CTV
pretty soon after it’s available, since it is a big step up for a number of
critical uses like vaults. These applications are already being built. They can
be used on signet which can be deployed to mainnet immediately&lt;sup id=&quot;fnref:sec&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:sec&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;. The
implementation details for basic custody contracts are pretty simple and don’t
require the level of coordination for support that other contracts like
lightning or DLCs, so adoption can be at the individual level.&lt;/p&gt;

&lt;p&gt;The path around prioritization remains a product management question, and not
something devs can be compelled to follow.&lt;/p&gt;

&lt;h1 id=&quot;4-there-are-other-things-to-work-on&quot;&gt;4) There are other things to work on.&lt;/h1&gt;

&lt;p&gt;I can get to the ball for this shot, but then I’d like to work on getting in
position for the next shot on time.&lt;/p&gt;

&lt;p&gt;There are other important technologies to work on, keeping covenants in limbo
ties up a lot of human capital in trying to solve for &lt;em&gt;getting something&lt;/em&gt;, vs.
&lt;em&gt;having something&lt;/em&gt; and being able to work on building solutions using it plus
designing new technologies that make Bitcoin even better in different or
complimentary ways.&lt;/p&gt;

&lt;p&gt;What’s the right amount of rumination (chewing) to swallowing? Eventually, the
mouthful you have is stopping you from taking the next bite.&lt;/p&gt;

&lt;h1 id=&quot;5-consensus-is-memoryless&quot;&gt;5) Consensus is memoryless&lt;/h1&gt;

&lt;p&gt;A memoryless process is something that “never makes progress”. For example,
consider a board game, where you need to roll a 6 to win. You expect to need 6
rolls to win. You roll a 5. How many more rolls do you need? It’s not 5. It’s 6
– the process is memoryless.&lt;/p&gt;

&lt;p&gt;Clearly consensus isn’t entirely memoryless. Something that is a concept only
obviously has to be turned into a hard artifact.&lt;/p&gt;

&lt;p&gt;CTV has been a ‘hard artifact’ for 2 years. 2 years ago I took a poll of 40 or
so developers who attended my utxos.org workshop in Feb 2020. An average
sentiment was that maybe we try to do CTV in a year or so, and that we could
definitely do it maybe in 2 years.&lt;/p&gt;

&lt;p&gt;I hear the same today from people who advocate a slower process. Maybe a year
from now, we could definitely do it in maybe 2 years.&lt;/p&gt;

&lt;p&gt;In 2 years, if we wait, won’t we hear the same?&lt;/p&gt;

&lt;p&gt;Here’s a few reason why we might hear the same complaints in the future:&lt;/p&gt;

&lt;p&gt;In 2 years, suppose Bitcoin is ~2x the price.&lt;/p&gt;

&lt;p&gt;Shouldn’t we acknowledge twice as much at risk and do twice as much work to
security audit things going into it? What if it’s not just El Salvador with
Bitcoin as a national currency, but now Guatamala too?&lt;/p&gt;

&lt;p&gt;Suppose we want to get to a point where 50% of the community has reviewed a
change. In 2 years, what if the community is 2x the size?  Then even if we hit
50% of today’s community, we only have 25% of the community read up.&lt;/p&gt;

&lt;p&gt;Hopefully we keep innovating. And if we do keep innovating, we’ll come up with
new things.  If we come up with a new thing that’s 2x as good as CTV in 2 years,
but it takes another 2 years to implement it concretely, should we wait till we
finish that? But what happens when we come up with something 2x better than
that? Wait another 2 years? Now we’re 4 years out from when the swing to get CTV
over the net was doable, and we’d have 0 in hand solutions for the problems CTV
tries to solve.&lt;/p&gt;

&lt;p&gt;All this points to the nature of the memorylessness of trying to get consensus
in an open network.&lt;/p&gt;

&lt;p&gt;The best I can do is to get to the ball and let the community decide to take the
shot.&lt;/p&gt;

&lt;p&gt;Concretely – what is the cost to having CTV in bitcoin during this time while
the “better” alternative is being worked on, if we do decide to activate
knowing we might one day obsolete CTV? What are the benefits to having 3-5
years of basic covenants in the meantime? On the balance it seems, to me, net
positive. It also seems to be a decision that the community at large can judge
if the costs are worth the benefits.&lt;/p&gt;

&lt;h1 id=&quot;6-you-can-fight-against-it&quot;&gt;6) You can fight against it.&lt;/h1&gt;

&lt;p&gt;A criticism of the soft fork process is it’s not safe with Speedy Trial (ST)
and ST is bad so we shouldn’t do it.  This is not a strong criticism: with
Taproot,  our most important upgrade in years, went smoothly even though there
was sharp disagreement over the safety of the mechanism at the time.&lt;/p&gt;

&lt;p&gt;Here’s a breakdown of why Speedy Trial is OK from the perspective of different participants:&lt;/p&gt;

&lt;h2 id=&quot;you-want-ctv-and-wont-take-no-for-an-answer&quot;&gt;You want CTV and won’t take no for an answer.&lt;/h2&gt;

&lt;p&gt;Start with a ST. After 3 months, it either goes or it doesn’t. At least we were
at the ball.  Now, let’s do a UASF with a LOT=true setting. Because ST is a fail
fast, it’s in theory using time where otherwise we’d have to spend coordinating
for the harsher realities of a LOT=true effort, so it’s a happy-path
optimization.&lt;/p&gt;

&lt;p&gt;If you’re a miner, you should signal during the period.&lt;/p&gt;

&lt;h2 id=&quot;youd-like-ctv-and-might-take-no&quot;&gt;You’d like CTV and might take no.&lt;/h2&gt;

&lt;p&gt;ST is for you. Can always follow up with another ST if the first fails, or
another option if your opinion changes.&lt;/p&gt;

&lt;p&gt;If you’re a miner, you should signal during the period.&lt;/p&gt;

&lt;h2 id=&quot;you-do-not-want-ctv-but-if-others-do-want-it-whatever&quot;&gt;You do not want CTV, but if others do want it, whatever.&lt;/h2&gt;

&lt;p&gt;ST is for you – it only goes through if others signal for it.&lt;/p&gt;

&lt;p&gt;If you’re a miner, you can signal no during the period, and you can write a
blogpost on why you don’t.&lt;/p&gt;

&lt;h2 id=&quot;you-do-not-want-ctv-and-will-not-take-yes-for-an-answer&quot;&gt;You do not want CTV, and will not take yes for an answer.&lt;/h2&gt;

&lt;p&gt;I’ve written &lt;a href=&quot;https://github.com/jeremyrubin/forkd&quot;&gt;forkd software&lt;/a&gt; in 40 lines
of python which guarantees you to be on a non-activating chain.  Resist my
evil&lt;sup id=&quot;fnref:really&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:really&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; fork!&lt;/p&gt;

&lt;p&gt;If you’re a miner, you signal no during this period. You may want to optimize
the forkd code for never building on the chain you don’t like.&lt;/p&gt;

&lt;h1 id=&quot;7-bitcoin-core-is-not-bitcoin&quot;&gt;7) Bitcoin Core is not Bitcoin&lt;/h1&gt;

&lt;p&gt;Bitcoin Core is a ‘reference client’ for the Bitcoin network, but it is not the
job of &lt;em&gt;any&lt;/em&gt; of the maintainers of Bitcoin Core to decide what happens with respect to
consensus upgrades.&lt;/p&gt;

&lt;p&gt;When I’ve previously asked maintainers for clarity on what ‘merge rubric’ they
might apply to the CTV pull request, I’ve been effectively stonewalled with no
criterion (even for things that were historically merged) and claims that
soft-fork discussion is outside the purview of maintainership. To be clear, I’m
not asking maintainers &lt;em&gt;to merge&lt;/em&gt;, merely when they do make the decision to,
what they are evaluating. The reticence to make clear guidelines around this
was surprising to me, at first.&lt;/p&gt;

&lt;p&gt;But then I understood: it isn’t the maintainer’s fault that they cannot give me
any guidance, it’s how it &lt;strong&gt;must&lt;/strong&gt; be.&lt;/p&gt;

&lt;p&gt;The idea that Bitcoin Core might serve as the deciding body for consensus
upgrades puts developers of Bitcoin Core into a dangerous position in the
future, whereby various agents might wrongfully attempt to compel Core
developers (e.g., using the legal system) to release a soft-fork client for
whatever nefarious goal. Making it clear that soft-forks are released by
independent efforts and adopted by the community at large is the only process
we can take that keeps Bitcoin Core apolitical and unexposed.&lt;/p&gt;

&lt;p&gt;We’ve seen in other communities what it looks like when lead devs exert too
much influence over the protocol and reference clients directly. Not good. We
do not want to have a similar precedent for Bitcoin.&lt;/p&gt;

&lt;p&gt;While previous soft-forks have generally been released by Core, I have no
qualms with leading by example for how future soft-fork development should be.
And if Core wants to merge CTV and do a release with compatible parameters,
they are welcome to, without such a release being driven by the project
maintainers directly, but rather to maintain compatibility with the will of the
community.&lt;/p&gt;

&lt;p&gt;Thus, &lt;em&gt;Alea Iacta Est&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;bonus-what-do-i-do-now&quot;&gt;Bonus: What do I do now?&lt;/h1&gt;

&lt;p&gt;I believe the community’s next steps are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Evaluate the software proposed above and find any bugs (claim 5.5 BTC Bounties?)&lt;/li&gt;
  &lt;li&gt;Discuss vociferously through the next few months if BIP-119 should be
activated or not (that means you should e.g. post publicly if you/your org endorses
this particular path, cover it in your news org, etc).&lt;/li&gt;
  &lt;li&gt;Before the end of July, Miners should signal if the speedy trial should succeed&lt;/li&gt;
  &lt;li&gt;Before November, if Speedy Trial passes, then all users should ensure they
upgrade to validate CTV&lt;/li&gt;
  &lt;li&gt;If Speedy Trial fails, at least we were at the ball, and we can either try
again &lt;em&gt;next year&lt;/em&gt;, meaning CTV would be availble for use in at minimum 1.5
years, or we can re-evaluate the design of CTV against alternatives that
would take more time to prepare engineering wise (e.g., more general
covenants, small tweaks to CTV).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-is-jeremy-rubin-going-to-do&quot;&gt;What is &lt;em&gt;Jeremy Rubin&lt;/em&gt; going to do?&lt;/h2&gt;

&lt;p&gt;Well, at this point I am unemotional about any outcome. Judica, my startup, is
focused on Bitcoin infrastructure that can be used to great impact with or
without CTV, so I’ve explicitly positioned myself to be personally indifferent
to outcome. I personally think that CTV is ready to go, and will deliver
immense benefits to the network, so I’ll advocate for signalling for it.&lt;/p&gt;

&lt;p&gt;However, in my advocacy, I’ll be careful to note that it’s not a &lt;em&gt;must&lt;/em&gt;. All
actors must decide if it’s in their own rational self-interest to have the
soft-fork proceed.&lt;/p&gt;

&lt;h2 id=&quot;but-what-about-uasf&quot;&gt;But what about UASF?&lt;/h2&gt;

&lt;p&gt;Regrettably, no one has produced the ST compatible UASF code since last year,
for various reasons. I understand the motives and tradeoffs of a UASF out the
gate, but I still personally believe a UASF is best done as a follow-up to a
ST, as I detailed in my mailing list post on the subject
&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018833.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;appendix-parameter-check&quot;&gt;Appendix: Parameter Check!&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gdate &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;@1651708800 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;
Thu May  5 00:00:00 UTC 2022
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gdate &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;@1660262400 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;
Fri Aug 12 00:00:00 UTC 2022
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The below script simulates the passage of time and confirms that we are
beginning at an expected mid-period time, and we are also ending near a
mid-period time, given the assumed number of SIGNAL_PERIODS. This technique
should guarantee with high certainty at least SIGNAL_PERIODS - 1, and
repeating the simulation with up-to-date numbers as the signalling window
progresses will produce more accurate forecasts.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SIGNAL_PERIODS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1650301349&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;732450&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;minutes_till_may_5th&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23457&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes_till_may_5th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expected Height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expected Start Height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Start is mid period: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2016.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;minutes_from_now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;In This many Minutes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes_from_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;In This many days&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes_from_now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;60.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;24.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stop_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGNAL_PERIODS&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Stopping at height&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;total_blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;End of signalling at expected time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromtimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;active_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;762048&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;secs_till_active&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;active_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Active at&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromtimestamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secs_till_active&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Expected Height 734795
Expected Start Height 735840
Start is mid period:  0.5183531746031746
In This many Minutes 33900
In This many days 23.541666666666668
Stopping at height 749952
End of signalling at expected time 2022-08-10 23:02:29
Active at 2022-11-09 23:02:29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:skate&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;including roller skating along the beach of course… &lt;a href=&quot;#fnref:skate&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pleb&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;in theory, pleb.fi was intended to be part of this… &lt;a href=&quot;#fnref:pleb&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:doit&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I think defining such a process more formally would be great, but it’d be controversial. &lt;a href=&quot;#fnref:doit&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:winner&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;technically, if you don’t touch it, this is a winner. A forced error, as &lt;a href=&quot;https://twitter.com/bitcoins/status/1516522926463410187&quot;&gt;Mike West&lt;/a&gt; notes, is where you still got your racquet to the ball. However, winners and forced errors are pretty similar in contrast to unforced errors. &lt;a href=&quot;#fnref:winner&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sec&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;probably following a thorough security review &lt;a href=&quot;#fnref:sec&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:really&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;sigh, if you really think I’m not working in good faith it’s a lost cause… &lt;a href=&quot;#fnref:really&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Warning: this post assumes a great deal of context on CTV is already understood by the reader. If you are not familiar, you may wish to start with utxos.org, the advent calendar, and the BIP-119 text and reference implementation, as those may provide much needed context about what CTV is and why a next step is being discussed. If you only have a little time, minimally I would advise these two from the advent calendar as the minimum required context: Contracting Primitives and Upgrades to Bitcoin and RoadMap or Load o’ Crap?.</summary></entry><entry><title type="html">Sapio Studio Tutorial for CTV Meeting</title><link href="http://rubin.io/bitcoin/2022/03/22/sapio-studio-btc-dev-mtg-6/" rel="alternate" type="text/html" title="Sapio Studio Tutorial for CTV Meeting" /><published>2022-03-22T00:00:00+00:00</published><updated>2022-03-22T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2022/03/22/sapio-studio-btc-dev-mtg-6</id><content type="html" xml:base="http://rubin.io/bitcoin/2022/03/22/sapio-studio-btc-dev-mtg-6/">&lt;p&gt;Other people have followed this tutorial with some success:&lt;/p&gt;

&lt;p&gt;Common sticking points include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Not building latest sapio binary before starting&lt;/li&gt;
  &lt;li&gt;Not building latest sapio-studio project before starting&lt;/li&gt;
  &lt;li&gt;Not having the correct clang version (&amp;gt;=12)&lt;/li&gt;
  &lt;li&gt;brew installing clang somewhere else (try /opt/homebrew, but also /usr/local/Cellar)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;ol&gt;
  &lt;li&gt;Set up a signet node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build this branch https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-signet-23.0-alpha&lt;/p&gt;

&lt;p&gt;You’ll likely want settings like this in
   your bitcoin.conf too:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[signet]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;txindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;signetchallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;512102946e8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;eca&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;597194e7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ed&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90377&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bbebc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9609&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ab&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3e35&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;706612&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ee&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;882759351&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ae&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;rpcport=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18332&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpcworkqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;fallbackfee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0002&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;addnode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;50.18.75.225&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;minrelaytxfee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;You’ll need to create a new wallet, if you’ve not done it before&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; createwallet sapio-studio-tutorial &lt;span class=&quot;c&quot;&gt;# If you've done this before fine&lt;/span&gt;
./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; getnewaddress
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Get coins to your address https://faucet.ctvsignet.com/ / DM me for more&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Follow the install instructions on
https://learn.sapio-lang.org/ch01-01-installation.html You can skip the the
sapio-studio part / pod part and just do the Local Quickstart up until
“Instantiate a contract from the plugin”.&lt;/li&gt;
  &lt;li&gt;run cargo build –release from the root directory to build the sapio-cli.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;start-up-sapio-studio&quot;&gt;Start Up Sapio Studio&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Get &lt;a href=&quot;https://yarnpkg.com/getting-started/install&quot;&gt;Yarn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Install Sapio Studio
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1 git@github.com:sapio-lang/sapio-studio.git &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sapio-studio
yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Start react server
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn start-react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Leave that running in  tab&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Start electron server
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn start-electron
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once it launches this is what you should see:
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/1-sapio-studio-init.png&quot; alt=&quot;&quot; /&gt;
Go ahead and click on settings to configure the sapio cli for the first time.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.16.35-AM.png&quot; alt=&quot;&quot; /&gt;
First, let’s configure our sapio-cli. Go head and do “Configured Here” and leave
everything blank. Click on the select file and point sapio studio to your (freshly done) release build of sapio-cli.&lt;/p&gt;

&lt;p&gt;Click Save Settings.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.17.37-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you should see the following confirmation.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.18.09-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next let’s configure your node. Clikc select file and point it to your
.cookie file and then configure the node as Signet &amp;amp; set the RPC port to whatever you used. Save it.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.18.59-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click test connection – it should tell you… something.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.19.39-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Navigate back to wallet. You should see some balance or something (assuming you did the faucet).
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.20.12-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, click “Load WASM Plugin” and find your plugin-example/target/wasm32-unknown-unknown/debug/*.wasm files. Go ahead and pick the jamesob vault one.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.20.41-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, click Create new contract.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.21.17-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll see a little applet for the JameVault. Look at that handsome guy!
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.22.07-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we need to create some Taproot keys for this – gonna need some command line action:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; getaddressinfo &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; getnewaddress &lt;span class=&quot;s2&quot;&gt;&quot;vault_project&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bech32m&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then copy the witness program. do this twice – one for cold one for hot.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.27.25-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click on your applet and start filling it out. You can get new addresses by clicking on Bitcoin Node (just not keys yet)
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.35.18-AM.png&quot; alt=&quot;&quot; /&gt;
n.b. sometimes things are in btc, sometimes in sats. c’est la vie.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.35.48-AM.png&quot; alt=&quot;&quot; /&gt;
finish up and click submit
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.36.02-AM.png&quot; alt=&quot;&quot; /&gt;
If all is right, you should see a contract get created!
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.36.17-AM.png&quot; alt=&quot;&quot; /&gt;
To actually create it, click on the parent txn and then sign it…
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.36.51-AM.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.00-AM.png&quot; alt=&quot;&quot; /&gt;
and then broadcast it (with real money you’ll want to verify before doing this)
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.03-AM.png&quot; alt=&quot;&quot; /&gt;
it’ll now pop up in the mempool.&lt;/p&gt;

&lt;p&gt;n.b. BUG ALERT: the viewer on the right hand side is a little glitchy. before playing
with the psbts/txn signing logic, always close it and re-open by clicking on the txn 
you want.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.14-AM.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.37.25-AM.png&quot; alt=&quot;&quot; /&gt;
Now you can click on the begin redeem txn and broadcast and sign that one so it’s in the mempool
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.44.38-AM.png&quot; alt=&quot;&quot; /&gt;
Click on the updatable output, and you’ll see some options.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-10.44.57-AM.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.53.45-AM.png&quot; alt=&quot;&quot; /&gt;
click on spend hot, and fill out the form. Hit submit, and then hit recompile.&lt;/p&gt;

&lt;p&gt;Be sure to pick an amount that is amount in input - fee (todo: make this smarter!).
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.53.54-AM.png&quot; alt=&quot;&quot; /&gt;
if all is well, you’ll see a hot spend.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.47.10-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if you picked a relative timelock &amp;gt; 1 block, try playing with the simulate tab :D.&lt;/p&gt;

&lt;p&gt;If you navigate back to the CONTRACTS tab you can pull up contracts you previously made /
recompilations with effects, even across sessions.
&lt;img src=&quot;/public/img/bitcoin/sapio-studio-tut-ctv6/Screen-Shot-2022-03-22-at-11.47.20-AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Other people have followed this tutorial with some success:</summary></entry><entry><title type="html">London Advancing Bitcoin Tutorial</title><link href="http://rubin.io/bitcoin/2022/03/04/london-tutorial/" rel="alternate" type="text/html" title="London Advancing Bitcoin Tutorial" /><published>2022-03-04T00:00:00+00:00</published><updated>2022-03-04T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2022/03/04/london-tutorial</id><content type="html" xml:base="http://rubin.io/bitcoin/2022/03/04/london-tutorial/">&lt;p&gt;Other people have followed this tutorial with some success:&lt;/p&gt;

&lt;p&gt;https://gnusha.org/ctv-bip-review/2022-02-22.log&lt;/p&gt;

&lt;p&gt;If you’re having a problem, see above log where people have had issues. Common problems include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Not building latest sapio binary&lt;/li&gt;
  &lt;li&gt;Not having the correct clang version (&amp;gt;=12)&lt;/li&gt;
  &lt;li&gt;brew installing clang somewhere else (try /opt/homebrew, but also /usr/local/Cellar)&lt;/li&gt;
  &lt;li&gt;xargs not liking something (working to debug it, you can open the JSONs with vi and do by hand some of the steps).&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;Install JQ (json manipulating tool) if you don’t have it / other things
needed to run a bitcoin node.&lt;/li&gt;
  &lt;li&gt;Set up a signet node.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Build this branch https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-signet-23.0-alpha&lt;/p&gt;

&lt;p&gt;You’ll likely want settings like this in
   your bitcoin.conf too:&lt;/p&gt;
&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[signet]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# generate this yourself                                                                                                                    rpcauth=generateme:fromtherpcauth.pyfile     &lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;txindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;signetchallenge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;512102946e8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ba&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;eca&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;597194e7&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ed&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90377&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;bbebc&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9609&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ab&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3e35&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;706612&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ee&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;882759351&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ae&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;rpcport=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18332&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;rpcworkqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;fallbackfee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0002&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get coins https://faucet.ctvsignet.com/ / DM me&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Follow the install instructions on
https://learn.sapio-lang.org/ch01-01-installation.html You can skip the the
sapio-studio part / pod part and just do the Local Quickstart up until
“Instantiate a contract from the plugin”. You’ll also want to run cargo
build –release from the root directory to build the sapio-cli.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open up the site https://rjsf-team.github.io/react-jsonschema-form/&lt;/li&gt;
  &lt;li&gt;Run sapio-cli contract api –file
plugin-example/target/wasm32-unknown-unknown/debug/sapio_wasm_plugin_example.wasm&lt;/li&gt;
  &lt;li&gt;Copy the resulting JSON into the RJSF site&lt;/li&gt;
  &lt;li&gt;Fill out the form as you wish. You should see a JSON like
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;network&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Signet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;effects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;effects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;arguments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;TreePay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fee_sats_per_tx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;participants&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tb1pwqchwp3zur2ewuqsvg0mcl34pmcyxzqn9x8vn0p5a4hzckmujqpqp2dlma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tb1pwqchwp3zur2ewuqsvg0mcl34pmcyxzqn9x8vn0p5a4hzckmujqpqp2dlma&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;radix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;You may have to delete some extra fields (that site is a little buggy).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Optionally, just modify the JSON above directly.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy the JSON and paste it into a file ARGS.json&lt;/li&gt;
  &lt;li&gt;Find your sapio-cli config file (mine is at
~/.config/sapio-cli/config.json). Modify it to look like (enter your rpcauth
credentials):
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;testnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;signet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;active&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;api_node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://0.0.0.0:18332&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;UserPass&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YOUR RPC NAME&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YOUR PASSWORD HERE&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;emulator_nodes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;enabled&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;emulators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;threshold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;plugin_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;regtest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a contract template:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;ARGS.json| ./target/release/sapio-cli contract create  &lt;span class=&quot;nt&quot;&gt;--file&lt;/span&gt; plugin-example/target/wasm32-unknown-unknown/debug/sapio_wasm_plugin_example.wasm  | jq &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; UNBOUND.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Get a proposed funding &amp;amp; binding of the template to that utxo:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;UNBOUND.json| ./target/release/sapio-cli contract &lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt; | jq &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; BOUND.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;Finalize the funding tx:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;BOUND.json | jq &lt;span class=&quot;s2&quot;&gt;&quot;.program[&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;funding&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;].txs[0].linked_psbt.psbt&quot;&lt;/span&gt; | xargs &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;% ./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; utxoupdatepsbt % |  xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;% ./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; walletprocesspsbt % | jq &lt;span class=&quot;s2&quot;&gt;&quot;.psbt&quot;&lt;/span&gt; | xargs &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt;% ./bitcoin-cli &lt;span class=&quot;nt&quot;&gt;-signet&lt;/span&gt; finalizepsbt % | jq &lt;span class=&quot;s2&quot;&gt;&quot;.hex&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Review the hex transaction/make sure you want this contract… and then
send to network:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./bitcoin-cli -signet sendrawtransaction 020000000001015e69106b2eb00d668d945101ed3c0102cf35aba738ee6520fc2603bd60a872ea0000000000feffffff02e8c5eb0b000000002200203d00d88fd664cbfaf8a1296d3f717625595d2980976bbf4feeb
10ab090180ccdcb3faefd020000002251208f7e5e50ce7f65debe036a90641a7e4d719d65d621426fd6589e5ec1c5969e200140a348a8711cb389bdb3cc0b1050961e588bb42cb5eb429dd0a415b7b9c712748fa4d5d
fe2bb9c4dc48b31a7e3d1a66d9104bbb5936698f8ef8a92ac27a650663500000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Send the other transactions:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat BOUND.json| jq .program | jq &quot;.[].txs[0].linked_psbt.psbt&quot; | xargs -I% ./target/release/sapio-cli psbt finalize --psbt %  | xargs -I% ./bitcoin-cli -signet sendrawtransaction %
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now what?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Maybe load up the Sapio Studio and try it through the GUI?&lt;/li&gt;
  &lt;li&gt;Modify the congestion control tree code and recompile it?&lt;/li&gt;
  &lt;li&gt;How big of a tree can you make (I did about 6000 last night)?&lt;/li&gt;
  &lt;li&gt;Try out other contracts?&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Other people have followed this tutorial with some success:</summary></entry><entry><title type="html">RoadMap or Load o’ Crap?</title><link href="http://rubin.io/bitcoin/2021/12/24/advent-27/" rel="alternate" type="text/html" title="RoadMap or Load o’ Crap?" /><published>2021-12-24T00:00:00+00:00</published><updated>2021-12-24T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2021/12/24/advent-27</id><content type="html" xml:base="http://rubin.io/bitcoin/2021/12/24/advent-27/">&lt;p&gt;&lt;em&gt;Welcome to day 27 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I know, I know.&lt;/p&gt;

&lt;p&gt;God forbid, a roadmap. People hate roadmaps. As I’ve noted
&lt;a href=&quot;/blog/2021/07/02/covenants/&quot;&gt;before&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Bitcoin Eschews Roadmaps and Agendas.&lt;/strong&gt;
I provide this maxim to make clear that this document is by no means an official
roadmap, narrative, or prioritization. However, it is my own assessment of what
the current most pragmatic approach to upgrading Bitcoin is, based on my
understanding of the state of outstanding proposals and their interactions.&lt;/p&gt;

  &lt;p&gt;My priorities in producing this are to open a discussion on potential new
features, risk minimization, and pragmatic design for Bitcoin.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you didn’t click, I definitely recommend reading &lt;a href=&quot;/blog/2021/07/02/covenants/&quot;&gt;the quoted
post&lt;/a&gt; in conjunction with this one. As well as, if
you’re a first time visitor to the Advent Calendar, the preceding 26 posts.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In contrast to my prior post, this roadmap is going to be less about full
justifications and unbiased weightings and tallyings of sentiments and more just
me spitting out a timeline we could introduce changes on. It’s not a final
answer, and in no way authoritative, but it’s a launch point for a discussion
that has to happen in some way at some point in order to advance a soft-fork.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Consider this as being posted for the sake of public review. If you disagree
with this, let me know why! But please no attacks just for the act of discussing
the topic of soft-fork activation&lt;sup id=&quot;fnref:ordo&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:ordo&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So buckle up here’s how we could make Bitcoin kick ass in 2022 and beyond:&lt;/p&gt;

&lt;h1 id=&quot;2022-the-year-of-the-covenant&quot;&gt;2022: The Year of the Covenant&lt;/h1&gt;

&lt;h2 id=&quot;bip-119-timeline&quot;&gt;BIP-119 Timeline&lt;/h2&gt;
&lt;p&gt;CheckTemplateVerify is getting close to ready to go. There are numerous
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;supporters (listed on utxos.org)&lt;/a&gt;, few detractors,
and a bumper crop of amazing use cases (did you read the calendar?) waiting for
us on the other side of CTV activation. The major critiques are that we might want
something that does ‘more’ than CTV itself, or to include it in a bundle of
things.&lt;/p&gt;

&lt;p&gt;My take: we’re not Gordon Gecko. Greed is &lt;em&gt;Not&lt;/em&gt; Good. CTV represents a clean, well
contained, unproblematic upgrade that’s going to deliver hella functionality in
service of scaling, decentralization, self custody, and privacy. Let’s secure
the bag for Bitcoin users everywhere and make it happen. We can always do more,
later, informed by what extensions we need for rapidly maturing tools like
Sapio. CTV is also technically specified and implemented sufficiently – a view
I’ve confirmed with a couple other devs – that it is able to be considered for
release.&lt;/p&gt;

&lt;h3 id=&quot;what-would-have-to-happen-to-release-ctv&quot;&gt;What would have to happen to release CTV?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;More signalers would need to be on
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt; or other platforms to demonstrate
interest and demand for CTV, ideally explaining which use cases are important to
them and why. Every voice counts for consensus. There is no list long enough to
capture what it would mean to have consensus, so there is not some threshold
that implies a ‘go ahead’, but N+1 is clearly better than N.&lt;/li&gt;
  &lt;li&gt;More “regular contributors” would need to spend time reviewing the code and BIP to
assure themselves of correctness and safety.  Nothing can move forward with out,
no matter the count of casual contributors. Many regular contributors don’t want
to ‘get political’ and look at forks. Fortunately, while all consensus changes
are complex, CTV is a very tiny and easy to review change in comparison with
SegWit or Taproot (more similar to CheckLockTimeVerify – a couple hundred lines
of consensus code, a couple hundred lines of non consenus code, and a couple
thousand lines of tests, no cryptographic primitives). &lt;strong&gt;NOTE:&lt;/strong&gt; This is a big
if!  Every contributor has the right to review, and ACK or provide a reasoned
NACK.  Even if everyone else is excited about something doesn’t mean there isn’t
space for new thought-through dissent. At the end of the article, I discuss
some concrete next steps to ensure more developer review occurs.&lt;/li&gt;
  &lt;li&gt;We would need to merge the implementation. This is simple, but enough ACKs have to
come in and rebases on other subsequent changes to get it in. This can
happen ahead of ‘full consensus’ since there are no deployment parameters,
but aids in increasing the testing priority of CTV.&lt;/li&gt;
  &lt;li&gt;We would need to get a majority of miners/pools primed to accept the upgrade.&lt;/li&gt;
  &lt;li&gt;Major alternative implementation maintainers (e.g., BTCD, Knots) should show
willingness to implement or accept patches for the new rules (although it’s a
soft-fork, this is good to do).&lt;/li&gt;
  &lt;li&gt;We would need to decide on release parameters for the implementation.&lt;/li&gt;
  &lt;li&gt;We would need to merge and release a client with release parameters&lt;/li&gt;
  &lt;li&gt;The client would needs to lock-in by a supermajority of miners signalling.&lt;/li&gt;
  &lt;li&gt;Then, and only then, would CTV be fully available.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;whats-the-maximally-aggressiveoptimistic-timeline&quot;&gt;What’s the Maximally Aggressive/Optimistic Timeline?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Soft Signals / Developer Review: 2-3 months required to get ACKs on the
implementation, assuming no major changes required.&lt;/li&gt;
  &lt;li&gt;Merge: Instant, just whenever there are ACKs against the implementation being
safe and matching BIP. Usually, enough ACKs for a PR is 2 regular contributors,
the comitter, and a maintainer, but for consensus changes there is no threshold
at which Bitcoin considers a change sufficiently peer reviewed. A consensus
change should see higher quality reviews, as well as external consensus that the
change is desired.&lt;/li&gt;
  &lt;li&gt;Getting miners primed to signal: ~20% of pools are on
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt;, more should be coming on board
soon. Don’t expect this to take additional time if in conjunction with Developer
review.&lt;/li&gt;
  &lt;li&gt;Debating Timelines: ~1 month to agree on a release timeline&lt;/li&gt;
  &lt;li&gt;Preparing a release: ~1 month to do release candidates and testing.&lt;/li&gt;
  &lt;li&gt;Speedy Trial: 3 months of signalling, 3 months of waiting for lock-in to active.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;overall-it-could-look-like-this&quot;&gt;Overall, it could look like this:&lt;/h3&gt;

&lt;p&gt;On March 15th developers reach agreement on merging BIP-119’s implementation.
On April 15th, agreement is reached on release parameters for signalling from ~
June 1st to ~September 1st. The activation height would be November 10th.  A client
is prepared, and tested, and released. No issues are found. The miners signal at
some point in the 3 month window above the threshold. CTV locks-in. Developers
can prep wallet software for deeper integration. CTV activates before
Thanksgiving, avoiding the “dire straits” of
thanksgiving-hanukkah-christmas-chinese-new-year-valentines-day season.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;but that’s basically identical to Taproot’s timeline?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Exactly. If we act on this timeline starting in early January 2022, it is
possible to meet an almost identical timeline for CTV as Taproot.&lt;/p&gt;

&lt;p&gt;Part of why it works is that the next major release is scheduled for 2022-04-01.
Soft forks are usually released as a minor patch on top of a few recent major
releases. So CTV could be:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Code included in 23.0 for CTV, no activation parameters&lt;/li&gt;
  &lt;li&gt;Activation parameters in 23.1, and backported to 22.x, 21.x, and (really this is up to maintainers how far to backport!).&lt;/li&gt;
  &lt;li&gt;23.1 released before June 1st, 2022.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;What could go wrong?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; There could be  a small tweak to CTV that makes it marginally
better, and it’s worth adding some extra review time as a result.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;CTV is highly design specific, so it’s unlikely there could be a change needed,
but not impossible. Changes would be unlikely to be large, though, e.g. perhaps
comitting to the same fields in a different order. Taproot saw some small
changes about a month before being merged.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Release process has a delay due to an issue uncovered in non-CTV code.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Soft fork releases are usually a minor patch onto an existing version, so it’s
unlikely that there would be a new bug, but the release would still be planned
and could resume as soon as patched. Speedy Trial’s ‘delayed activation’ also
helps with providing more time for (non-consensus) bug fixes in the client
between lock-in and activation.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Release process has a delay due to an issue uncovered in CTV’s code.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;If the issue is a bug, it would merit more strict scrutiny on the code and
tests (which are pretty comprehensive currently) as to how they could be passing
with an issue like that. Once patched and reviewed, it’s still possible to merge
and release. However, the issue could also be a conceptual bug (e.g., here’s how
to do recursive covenants with CTV), which would certainly delay (and I’d be the
first to say it!) continuing with CTV at the present time. The former issue is
likely more likely than the latter, and that risk is defrayed by thorough code
review and testing.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; There’s not enough developer consensus conceptually.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;There are many developers supporting on
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt;. I’ve also made an effort to
reach out to a variety of developers who are not on the site to seek out
dissent, and I do not think there are any current safety concerns, which is
positive for developers who might not Ack but don’t have a ‘this is a grave
mistake’ Nack up their sleeves. Again, there’s no well defined threshold for
what is “enough”.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Miners don’t want CTV and don’t signal for it.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
_20% of the hash pools already say they do want it, and more should be joining
that list soon™. Should that not happen, there could be a UASF effort to ensure
the activation of BIP-119 if users want CTV strongly enough. _&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Concern:&lt;/strong&gt; Disagreement on Activation mechanism.&lt;br /&gt;
&lt;strong&gt;Rebuttal:&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;Taproot’s Speedy Trial (ST) worked very well. Big Success. No need to mess with
the recipe. UASF-clienters know how to make the mods to the activation logic for
whatever they want as a competing client. But perhaps that’s not a comfortable
status quo, so this is certainly one to watch. I’ve made my own remarks on what
order of operations I think ST/UASF/etc should go in
&lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-April/018833.html%5C&quot;&gt;here&lt;/a&gt;,
but there’s not consensus on this topic. Notably, there is some dissent from
reusing ST at all. While important, activation logic is a secondary (but still
critical) concern to the decision to accept the current specification and
implementation of CTV in the first place, and discussion on that can proceed
in parallel to progress on consensus on the implementation.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;and-then-what&quot;&gt;And Then What?&lt;/h2&gt;

&lt;p&gt;After the release of CTV Soft Fork Client, what goes next?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Jeremy takes a vacation for a month.&lt;/li&gt;
  &lt;li&gt;Sapio continues to improve dramatically, as detailed in the last post.&lt;/li&gt;
  &lt;li&gt;Work begins on new Opcodes.&lt;/li&gt;
  &lt;li&gt;More fun applications get built on CTV/Sapio (for examples, review the entire series of
&lt;a href=&quot;/advent21&quot;&gt;the Advent Calendar&lt;/a&gt;, but a few of my favorites are &lt;a href=&quot;/bitcoin/2021/12/10/advent-13/&quot;&gt;Payment
Pools&lt;/a&gt;,
&lt;a href=&quot;/bitcoin/2021/12/07/advent-10/&quot;&gt;Vaults&lt;/a&gt;, and &lt;a href=&quot;/bitcoin/2021/12/17/advent-20/&quot;&gt;Bonded
Oracles&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Non-Interactive Lightning Channel BOLT drops.&lt;/li&gt;
  &lt;li&gt;Payment Pool spec drops with LN integration.&lt;/li&gt;
  &lt;li&gt;(Privacy + Scale)++&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;new-opcodes-you-say&quot;&gt;New Opcodes you say?&lt;/h2&gt;

&lt;p&gt;Yep, new opcodes. As soon as CTV is merged, there are some new features that
could be tooled into BIPs without much controversy, given their simplicity:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;New Math Opcodes&lt;/li&gt;
  &lt;li&gt;OP_AMOUNT&lt;/li&gt;
  &lt;li&gt;OP_CSFS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are “universally agreed on” bits of functionality that have very little
wiggle room in how they might be specified. Therefore their implementation,
testing, and release is mostly mechanical. This makes them good bets for a
concrete timeline because they’re a rote-development task with few research
dependencies and easily agreed on design.&lt;/p&gt;

&lt;p&gt;With hard work, these could be reviewed and tested in time for Speedy Trial
signalling in June 2023 (+1 year), with realllllly hard work 6 months earlier
(but there are conflicting priorities for developer’s time – e.g., building
stuff with/for CTV and Taproot – that make that super unlikely).&lt;/p&gt;

&lt;h3 id=&quot;what-about-anyprevout&quot;&gt;What about Anyprevout&lt;/h3&gt;

&lt;p&gt;Anyprevout is 1000000% not ruled out here for advancing to the consensus stage
in 2022. There are a couple things happening on Anyprevout that make me suspect
it might be more primed towards early-mid 2024 best case.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Taproot upgraded channels taking some steam away from Eltoo with AJ’s
proposal to do state compaction via PTLCs.&lt;/li&gt;
  &lt;li&gt;Disagreement over no justice transactions in the community for high value
channels.&lt;/li&gt;
  &lt;li&gt;Open research on specific Eltoo protocol implementation / need for other
tools (like SIGHASH_BUNDLE).&lt;/li&gt;
  &lt;li&gt;Lack of an open PR and test suite for it.&lt;/li&gt;
  &lt;li&gt;CSFS + CTV permitting a version of Eltoo.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of these reasons point to it being highly unlikely APO could be finished on
the timeline presented for CTV, but also that given a desire to see a working LN
client (ensuring the protocol is sound end-to-end without modifications) leads
to additional engineering complexity.&lt;/p&gt;

&lt;p&gt;I’ve heard on the rumour vine some excellent engineers might start working on an
Eltoo implementation, I believe that work to be of tremendous value to gain
consensus on deploying anyprevout.&lt;/p&gt;

&lt;p&gt;Given that a couple years seems like the best case for a set of upgrades around
APO to deliver Eltoo, if we have the ability to deliver CTV now, it is a good
asymmetric bet for delivering utility to Bitcoin’s users.&lt;/p&gt;

&lt;p&gt;Suppose I’m wrong, and Anyprevout really could get done in 2022. Shouldn’t it
be ‘next’ and CTV can wait?&lt;/p&gt;

&lt;p&gt;The notion that any soft-fork is “next” for consideration and blocks any other
from being considered is somewhat contrary to the support for parallel
soft-forks with distinct version bits used for signalling. The possibility of
deploying soft forks on independent bits means things can be ultimately
“proposed” whenever they’re mature enough to enter the “final stage” and the
timing fits with Bitcoin’s general release schedule. The chief counterarguments
to this are twofold: One, review resources are finite and we can’t even think
about \(&amp;gt;1\) thing at a time; Two, it’s bad if the protocol is simultaneously
deploying \(N\) upgrades and any of them might fail, leading to \(2^N\)
potential protocol states. It’s actually the other way around: if things can
proceed in parallel we can get more review, because developers won’t feel that
reviewing others work has the potential to slow down their own, and we’ll be
more certain that the upgrades we release are strongly desired by the community
(i.e., will end in a UASF if not activated due to miner apathy).&lt;/p&gt;

&lt;h3 id=&quot;what-about-tapleafupdateverify&quot;&gt;What about TapLeafUpdateVerify&lt;/h3&gt;

&lt;p&gt;If I had to estimate, I’d say TLUV needs another year or so of people ‘stewing’
on the possibilities and design before it could move forward. It would then
probably need at least a year of tinkering to get a well-accepted
implementation, and then a year for release process. So let’s say best case it
could be a 2024 thing, more likely 2025 given Anyprevout is seen as higher
priority for the engineering work.&lt;/p&gt;

&lt;h3 id=&quot;what-about-inherited-ids-iids&quot;&gt;What about Inherited IDs (IIDs)?&lt;/h3&gt;

&lt;p&gt;They didn’t make the cut in the earlier piece since they’re a bit more abstract,
but I’d posit that IIDs could also approach a 2024 timeline were the developer
of the idea to spend a heckin’ big amount of time on advocacy for the concept in
2022, and present a clean implementation of the concept (&amp;amp; demonstration of
overheads) by 2023. This is complicated by the issue that he would have to also
solve issues with requiring a new index, such as helping assist assumeutxo
compatibility, write reindexing logic from genesis (or somehow exclude old
coins?), and also work on utreexo compatibility. Those all seem tractable,
but very hard to do for someone who is not a full-time long-time contributor
to the project, but I’m a believer that the job could be done given the quality
of the insights in the IIDs paper.&lt;/p&gt;

&lt;h2 id=&quot;parallel-developments&quot;&gt;Parallel Developments?&lt;/h2&gt;

&lt;p&gt;In parallel to the above, there are some things that I think are &lt;em&gt;very cool&lt;/em&gt;
that should remain under development, but don’t have a clear path to inclusion
presently.&lt;/p&gt;

&lt;p&gt;The first is &lt;a href=&quot;https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018168.html&quot;&gt;Transaction Sponsorship&lt;/a&gt;, which could substantially 
simplify many protocols on top of Bitcoin, especially things like Eltoo and CTV
stuff. We can’t predict that too well because it will depend on what developers
end up running up against with current best practices around CPFP/RBF, but
I suspect it might become popular if a small group of developers prioritizes
such an approach as a unified front. Since it’s technically simple, it wouldn’t
take much time to implement, but because there’s very little consensus for
it right now it’s not fit for inclusion in a roadmap.&lt;/p&gt;

&lt;p&gt;The next is &lt;a href=&quot;https://blog.blockstream.com/en-simplicity-github/&quot;&gt;Simplicity&lt;/a&gt;. Simplicity could completely change how Bitcoin
scripting works and is super duper exciting. I guess it’s going out on Elements
sometime soon? However, it’s stupidly complicated for most devs to fully
understand (although it is called simplicity…), so it would take a fair
amount of time (read: years) before the implementation could be sufficiently
independently reviewed by the intersection of qualified Bitcoin and Programming
Language theory reviewers. The interesting thing about Simplicity with respect
to this roadmap is that because it’s so general, as soon as it seems like
Simplicity would be on Bitcoin within ~1.5 years, it’s likely all other
scripting soft fork developers would “stop” development&lt;sup id=&quot;fnref:note&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:note&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and focus on
deployment as Simplicity Jets.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;concrete-next-steps&quot;&gt;Concrete Next Steps&lt;/h1&gt;
&lt;p&gt;Should this plan not seem feasible to the near unanimity of the community for us
the deliver on (e.g., with +2-3 months of the suggested timeline), I don’t think
there is another good opportunity to enact on an activation of CTV and the best
course of action would be to delay +1 year. There could be a UASF for it, since
there is strong user demand for CTV, but I wouldn’t personally lead the charge
on that beyond ensuring that the BIP-119 code remains up-to-date and is
implemented correctly.&lt;/p&gt;

&lt;p&gt;Assuming someone doesn’t make a bold argument that gives me or the aggregate
current supporters of CTV pause, I plan to begin holding a fortnightly CTV
review session to iron out any details, additional testing, code review, and
activation plans. I would also like to help a third party host a &lt;a href=&quot;https://bitcoincore.reviews&quot;&gt;review
club&lt;/a&gt;, although the focus of Review Club is more
educational for the reviewers as opposed to for the purpose of formally
reviewing the code for merge.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;You’ve now reached the end of Rubin’s Bitcoin Advent Calendar, 2021! Congrats.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wc -w $(ls | grep advent)&lt;/code&gt; tells me that means you read 50,773 words total of
me rambling on about covenants. That’s PhD thesis length! I really hope you
found something to enjoy.&lt;/p&gt;

&lt;p&gt;A special thanks to all who helped review this post in particular and provided
feedback in ensuring I’ve done an OK job capturing the complexity of gaining
consensus. To the extent that I haven’t succeeded in representing your
perspectives here, I take sole responsibility for the inadequacy. Your
constructive feedback on how to improve is welcomed. A further special thanks to
Ryan Gentry who encouraged me to produce the series in the first place, and to
Sarah Satoshi for her support as I battled my way through this task.&lt;/p&gt;

&lt;p&gt;As for me, I’m off to sip some Eggnog and eat some holiday cookies! I’ll take a
little bit of a break, and be back in the New Year following up on next steps
and dropping fresh content for y’all as always.&lt;/p&gt;

&lt;p&gt;Merry Christmas and Happy New Years,&lt;/p&gt;

&lt;p&gt;Jeremy&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:ordo&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;You do you though. It’d really hurt my feelings if you called me a Smelly Weasel attacking Bitcoin. &lt;a href=&quot;#fnref:ordo&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:note&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Transaction Sponsorship cannot be done, as far as I understand, as a part of Simplicty. Things like that would progress independently. &lt;a href=&quot;#fnref:note&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Welcome to day 27 of my Bitcoin Advent Calendar. You can see an index of all the posts here or subscribe at judica.org/join to get new posts in your inbox</summary></entry><entry><title type="html">The History and Future of Sapio</title><link href="http://rubin.io/bitcoin/2021/12/23/advent-26/" rel="alternate" type="text/html" title="The History and Future of Sapio" /><published>2021-12-23T00:00:00+00:00</published><updated>2021-12-23T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2021/12/23/advent-26</id><content type="html" xml:base="http://rubin.io/bitcoin/2021/12/23/advent-26/">&lt;p&gt;&lt;em&gt;Welcome to day 26 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sapio began as little more than a slide in presentations I would give on what
BIP-119 could be with the support of a programming environment.&lt;/p&gt;

&lt;p&gt;While my conceptions of what could be built with CTV were about on-par with
where they are today, the tools available were very clunky. You can see
one of the original diagrams from the C++ Code below (&lt;a href=&quot;https://github.com/JeremyRubin/bitcoin/blob/8f297449ff296533d7dd0ac44b62cb3cc33d1b83/src/wallet/rpcwallet.cpp#L1339&quot;&gt;code here&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/*
    *                   [      vault_to_vault n  ]
    *                     |a                   |b
    *                    (0)                  (1)
    *                    /\                   /\
    * wait + maturity   /  \                 /  \ wait + step_period    (attached)
    * [   hot_to_hot   ]   /  [vault_to_cold]    [vault_to_vault n - 1]
    *                     /                         |           |
    *        [hot_to_cold]                         (0)         (1)
    *                                               .           .
    *                                               .           .
    *                                                           .
    *                                                     wait + step_period * n   (attached)
    *                                                   [vault_to_vault 0]
    *                                                      |
    *                                                     (0)
    *                                                     */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;style&gt;
code {
    font-size: 0.75em !important;
}
&lt;/style&gt;

&lt;p&gt;When I presented it on February 1st, 2020 at the CTV workshop, one of the last
Bitcoin events before the pandemic began&lt;sup id=&quot;fnref:mit&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:mit&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I knew I had to present a more
concrete vision on how smart contracts could be built, rather than spit-and-glue
C++.&lt;/p&gt;

&lt;p&gt;And so I included slide inspired by the hand rolled smart contracts I was making
in C++ about how the technique could be generalized.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/sapio-future/sapio-idea.svg&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;a slide at the feb. 2020 CTV workshop.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a research project I am interested in pursuing. We have a few
scripting languages. We have Dan here who wrote Ivy. There’s also Balzac and
Solidity. It’s poorly named, but it actually has some really interesting ideas
that aren’t in other scripting languages for bitcoin. There’s some notion of
participants with private state they are storing, and has some notion of
interactivity. I also threw up there BlueSpec which is like a VHDL competitor
that is pretty neat. If you think about it, there’s a software layer for
controlling vaults but there’s also a hardware layer- so how can we describe
transactional hardware? You wind up with similar controls as a BlueSpec-like
language where you are creating plumbing and a description of how things are
moving rather than something that has imperative state.&lt;/p&gt;

  &lt;p&gt;As an example, one of the properties with OP_CHECKTEMPLATEVERIFY that is cool is
the narrow window of a standard OP_CHECKTEMPLATEVERIFY script is that you have
this composability property where for a given model that goes to arbitrary
address outputs, you can just throw another one inside it. As the outputs of
that annuinity, you can put undo send as the outputs of that annunity, and you
can tag on more and more programs into that if you want. On this slide is a
templately description of a language, which helps if someone else given the same
program description can verify that the hash is the same for the given inputs.
Instead of sending you a million branches, you can generate them yourselves.&lt;/p&gt;

  &lt;p&gt;Q: Is there code for your metascript thing?&lt;/p&gt;

  &lt;p&gt;A: No. It’s just an idea I’ve been toying with. I got relatively close to
metascript just writing in C++ just writing with C++ templates. Then I got ready
to kill myself doing that because writing templates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’d discussed similar slides at earlier events, usually included it as an
example of something &lt;em&gt;someone else&lt;/em&gt; could build while I kept pluggin’ away
working on Bitcoin Core. Eventually I realized that me claiming that CTV could
be used to do these things and CTV demonstrably doing these things was an
obstacle… I needed to make the prototype.&lt;/p&gt;

&lt;p&gt;So I set off hacking together a prototype… I spent an afternoon or two mucking
around in C++ only to realize that wasn’t going to happen, and then I switched
to python. Python was a great choice, and after quite a bit of time pluggin
away, I had something that actually worked.&lt;/p&gt;

&lt;p&gt;There was a moment of magic where I connected it to the Sapio Studio (which
actually existed long before Sapio as just a visualizer for a set of
transactions) to load a contract written in python and…  it worked. Really
well. It felt incredible. I began talking more about what Sapio could do,
thinking through some of the problems and solutions. I  even gave a talk in the
metaverse with Udi where I dropped my virtual laser pointer on the ground for a
minute and couldn’t pick it back up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/sapio-future/reckless.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;there were more people sitting further back I swear…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At a certain point I decided to start working on cleaning up Sapio by using
Python’s gradual typing and trying to convert to using Miniscript instead of my
custom-made Sapio script fragment builder. I was neck deep in type refactors and
then I had a deep realization:&lt;/p&gt;

&lt;h2 id=&quot;python-fucking-sucks&quot;&gt;Python FUCKING SUCKS&lt;/h2&gt;

&lt;p&gt;I was incredibly greatful for the rapid iterating that python allowed me, but I
realized at this point that it was going to be nearly impossible to make Sapio
actually good and not just a toy working in python.  What had started as a proof
of concept for someone to do “for real” had gotten good enough conceptually but
was bursting at the seams and was not going to ever yield something production grade.&lt;/p&gt;

&lt;p&gt;So I did a reset.&lt;/p&gt;

&lt;p&gt;I started building Sapio in Rust, re-implementing (but much more cleanly) the
paradigms that I had previously developed, relying on well tested and type
rust-bitcoin libraries instead of janky test-framework python code from Bitcoin
Core.&lt;/p&gt;

&lt;p&gt;And one day – almost like Deja Vu – I plugged the Sapio Rust served in place
of the Python one for the Sapio Studio and everything Just Worked™.&lt;/p&gt;

&lt;p&gt;Since then, Sapio has only matured and gotten better and better with each
passing month.  I’ve added tons of new features, improved the underlying
architecture, made the ABIs more well defined, built stronger intergrations with
the GUI, and more. Today, Sapio is actually usable on mainnet (if you’re an
expert at least), and I’ve used to do congestion control payments and art
projects.&lt;/p&gt;

&lt;p&gt;Sapio has helped me cut through the content for this Advent Calendar like a
swiss army knife.  It’s actually becoming a pretty decent tool!&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h1&gt;

&lt;p&gt;Sapio needs to get to the next level. There are many major areas of work in the
pipeline. You might think of this as “Sapio is so incomplete it’s not ready”.
I think of it more as Sapio is just getting started:&lt;/p&gt;

&lt;h4 id=&quot;upgrade-to-taproot&quot;&gt;Upgrade to Taproot&lt;/h4&gt;

&lt;p&gt;Support for Taproot in rust-bitcoin and rust-miniscript is coming! Once that
lands, I need to rebase (and maybe upstream?) some Sapio features, and then
update the compiler to always use Taproot outputs!&lt;/p&gt;

&lt;h4 id=&quot;improve-sapio-ctv-emulators-with-taproot-if-ctv-seems-to-be-slow&quot;&gt;Improve Sapio CTV Emulators with Taproot (if ctv seems to be slow)&lt;/h4&gt;

&lt;p&gt;Once taproot lands, the multi-sig federated oracle designs can be set up to do a
MuSig Schnorr signature instead of just a bare multi-sig, allowing wider federations.&lt;/p&gt;

&lt;p&gt;This engineering work only really matters if CTV seems unlikely, but could
be useful to have anyways for future purposes &amp;amp; extensions to Sapio.&lt;/p&gt;

&lt;h4 id=&quot;build-out-some-full-featured-applications-backed-by-sapio&quot;&gt;Build out some “full featured” applications backed by Sapio&lt;/h4&gt;

&lt;p&gt;Right now Sapio works for making little Applets, but there is no “end to end”
software (e.g., vaults) made in Sapio.&lt;/p&gt;

&lt;p&gt;This requires work on both the Sapio Studio front and potentially on a website
for things like Sapio NFTs.&lt;/p&gt;

&lt;p&gt;This will push the boundaries on integrating Sapio into real applications.&lt;/p&gt;

&lt;p&gt;One particular feature that would be great is ‘auto-signing’ on valid state
transitions proposed at a certain continuation point. For example, if we have an
NFT we want to dutch auction, we should be able to have a sapio module running
that is happy to spit out the relevant transactions with a nice API.&lt;/p&gt;

&lt;h4 id=&quot;more-advanced-programming-of-transactions&quot;&gt;More advanced programming of transactions&lt;/h4&gt;

&lt;p&gt;Currently the Sapio transaction builder from within Sapio branches is a bit
limited in what it can express.&lt;/p&gt;

&lt;p&gt;Augmenting it with the ability to more fully describe partially signed bitcoin
transactions (PSBTs), e.g., when used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continuation&lt;/code&gt; context would
advance the state of the art.&lt;/p&gt;

&lt;h5 id=&quot;key-management&quot;&gt;Key Management&lt;/h5&gt;
&lt;p&gt;Relatedly, it would be really useful if you could tell Sapio how to access a
signing module and have sapio use that external key to generate the appropriate
signatures for the state transitions.&lt;/p&gt;

&lt;h4 id=&quot;better-sapio-cli--server-that-can-keep-wasm-modules-loaded-in-memory-aiding-performance&quot;&gt;Better sapio-cli / server that can keep WASM modules loaded in memory, aiding performance&lt;/h4&gt;

&lt;p&gt;Right now every time a module is used the entire thing has to reload which is
super slow.&lt;/p&gt;

&lt;p&gt;It should be possible to have a single server instances that manages a cache of
all modules, greatly boosting performance, especially for recursive cross-module
calling contracts.&lt;/p&gt;
&lt;h4 id=&quot;client-side-verification-caching-across-module-boundaries&quot;&gt;Client Side Verification Caching Across Module Boundaries&lt;/h4&gt;

&lt;p&gt;For things like NFTs that we saw, we have to always re-compile the &lt;em&gt;entire&lt;/em&gt;
history of the NFT to do state transitions. However, many of these state
transitions are just doing the exact same thing every time, re-verifying from
genesis. We should be able to cache the compilations at well defined boundaries.&lt;/p&gt;

&lt;h4 id=&quot;better-formal-analysis-tools--type-system-on-top-of-sapio&quot;&gt;Better formal analysis tools / type system on top of Sapio&lt;/h4&gt;
&lt;p&gt;Currently Sapio has the ability to define various interfaces for composing Sapio contracts cleanly.&lt;/p&gt;

&lt;p&gt;But we don’t have a great way of proving what we want a contract to do v.s. what it does.&lt;/p&gt;

&lt;p&gt;This work will start as being able to express more properties about a module in
it’s “manifest”, and will culminate in being able to check the validity of compositions
of contracts based on them.&lt;/p&gt;

&lt;p&gt;If anyones looking to do a PhD thesis on Sapio, this is prolly it.&lt;/p&gt;

&lt;h4 id=&quot;more-module-types&quot;&gt;More Module Types&lt;/h4&gt;

&lt;p&gt;Right now all WASM modules are for generating a ‘Compiled’ contract from a JSON.&lt;/p&gt;

&lt;p&gt;I would love to add defined module types to cover all the standard components like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Miniscript Fragments&lt;/li&gt;
  &lt;li&gt;Then Functions&lt;/li&gt;
  &lt;li&gt;Continuation Functions&lt;/li&gt;
  &lt;li&gt;Transaction Template Generators&lt;/li&gt;
  &lt;li&gt;Trait Verifiers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more.&lt;/p&gt;

&lt;h4 id=&quot;more-emulator-types&quot;&gt;More Emulator Types&lt;/h4&gt;

&lt;p&gt;Sapio works &lt;em&gt;today&lt;/em&gt; with CTV &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; functions because the functionality can be
emulated by a federation of signers.&lt;/p&gt;

&lt;p&gt;Figuring out how to cleanly extend the signing server paradigm to a number of
different types of Covenant proposal (e.g. APO, TLUV, CAT) or other opcodes
could add a lot of value for making Sapio the defacto platform and proving
ground for upgrades to Bitcoin.&lt;/p&gt;

&lt;h4 id=&quot;unifying-then-and-continuation&quot;&gt;Unifying Then and Continuation&lt;/h4&gt;

&lt;p&gt;Then and Continuation really are the same thing conceptually, it would be&lt;/p&gt;

&lt;h4 id=&quot;standard-library-of-useful-applications--plugins&quot;&gt;Standard Library of useful applications / Plugins&lt;/h4&gt;

&lt;p&gt;Title says it all. There should be more off the shelf things to use!&lt;/p&gt;

&lt;h4 id=&quot;wallet-stack-for-sapio-contracts&quot;&gt;Wallet Stack for Sapio Contracts&lt;/h4&gt;

&lt;p&gt;The Sapio Studio is rapidly imporving as a system for engaging with Sapio
contracts, but it’s lacking in the management and storage of all of a user’s
contracts. We can, and will, do a better job with this.&lt;/p&gt;

&lt;p&gt;This includes being able to make watchtower-like functionality for Sapio. It’s
coming, but will likely require a lot of new features to the language spec to
express if this then that monitoring conditions. And with features comes
complexity.&lt;/p&gt;

&lt;p&gt;You can see hints to this in the slide earlier, being able to react to e.g.
confirmation or mempool events.&lt;/p&gt;

&lt;p&gt;This also includes dramatic improvements needed to the GUI so that users
can understand much more deeply what contracts are doing.&lt;/p&gt;

&lt;h4 id=&quot;binary-releases&quot;&gt;Binary Releases&lt;/h4&gt;

&lt;p&gt;Right now Sapio is just DIY to build and run it yourself, but we really ought to
work towards stable binary releases to quickstart users.&lt;/p&gt;

&lt;h4 id=&quot;visual-programming-for-building-sapio-contracts&quot;&gt;Visual Programming for Building Sapio Contracts&lt;/h4&gt;

&lt;p&gt;When composing together Sapio modules, I would &lt;em&gt;really&lt;/em&gt; like for it to be kind
 of labview like interface for adding data or other modules, where you can
 “typecheck” that the wires (module names) are composing into slots they work.
 If that sounded like gibberish, I just mean that I want to be able to plug in a
 module hash for a NFT Sale contract into my NFT contract and have the UX give
 me real time feedback if I should be able to do that.&lt;/p&gt;

&lt;h4 id=&quot;sapio-package-manager--deterministic-builds--signers&quot;&gt;Sapio Package Manager / Deterministic Builds / Signers&lt;/h4&gt;

&lt;p&gt;As more modules become commonly used (e.g., like NFTs) we want to ensure all
 users can build an exact copy themselves (Deterministic Builds) or that they
 can find a build signed by a number of respected code signers (Signers). While
 we can use Cargo / crates.io for the package management of our actual rust code,
 we need something to distribute the sapio wasm blobs nicely!&lt;/p&gt;

&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;/h4&gt;

&lt;p&gt;Writing tests for Sapio contracts is hard as heck. We need some bold ideas on
 what sorts of properties would be useful to test for. Fortunately, a lot of
 properties we care about (like not wasting money) can be checked by the sapio
 library to be safe, but we still want to be able to ensure we never lose a
 users funds out of Sapio.&lt;/p&gt;

&lt;p&gt;#### Getting CTV Locked in&lt;/p&gt;

&lt;p&gt;Duh!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If I get even a tenth of this completed 2022 will be a good year for Sapio.&lt;/p&gt;

&lt;p&gt;But I plan to get it all done.&lt;/p&gt;

&lt;p&gt;Perhaps with your support – if you’re an engineer or funder interested
 in helping propel this, please reach out!&lt;/p&gt;

&lt;p&gt;p.s. safe holiday travels!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:mit&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;That honor I think goes to the MIT Bitcoin Expo. &lt;a href=&quot;#fnref:mit&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Welcome to day 26 of my Bitcoin Advent Calendar. You can see an index of all the posts here or subscribe at judica.org/join to get new posts in your inbox</summary></entry><entry><title type="html">Decentralized Autonomous Organizations (DAOs) Will Save Bitcoin</title><link href="http://rubin.io/bitcoin/2021/12/22/advent-25/" rel="alternate" type="text/html" title="Decentralized Autonomous Organizations (DAOs) Will Save Bitcoin" /><published>2021-12-22T00:00:00+00:00</published><updated>2021-12-22T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2021/12/22/advent-25</id><content type="html" xml:base="http://rubin.io/bitcoin/2021/12/22/advent-25/">&lt;p&gt;&lt;em&gt;Welcome to day 25 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The title of this article is a joke. Gotcha!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/dao/bart.png&quot; alt=&quot;Bart Simpson writing &amp;quot;DAOs are just fancy multisigs&amp;quot;.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Decentralized Autonomous Organization is pretty much what’s called an &lt;em&gt;&lt;a href=&quot;http://itre.cis.upenn.edu/~myl/languagelog/archives/003555.html&quot;&gt;orphan
initialism&lt;/a&gt;&lt;/em&gt;.
So while DAO doesn’t really mean anything is decentralized, autonomous, or an
organization, but the term DAO has stuck around anyways. Even moreso than NFT!
More or less, DAOs are just fancy multisigs. But they’ve been used for all sorts
of things, ranging from attempting to buy the US Constitution as a group,
investing in startups, buying Ross Ulbricht’s NFTs, or maybe even buying my
undies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/bitcoin/advent/dao/nytimes.jpeg&quot; alt=&quot;yes this is a joke&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This post has some required reading. You have to have read through at least up
to &lt;a href=&quot;/bitcoin/2021/12/10/advent-13/&quot;&gt;payment pools&lt;/a&gt; in the advent calendar, but
ideally you’d have read all the posts…&lt;/p&gt;

&lt;p&gt;So how will fancy-multisigs save Bitcoin? In this post we’ll work through an
example of building a DAO to fund Bitcoin Core Developers, like a Bitcoin native
Gitcoin competitor.&lt;/p&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;what-do-we-want-from-our-dao&quot;&gt;What do we want from our DAO:&lt;/h1&gt;

&lt;p&gt;The DAO will serve three functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;To Add members who pay in&lt;/li&gt;
  &lt;li&gt;To make Payments if a Majority of the payers by value vote&lt;/li&gt;
  &lt;li&gt;To mint commemorative NFTs&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;majority-rules&quot;&gt;Majority rules&lt;/h2&gt;

&lt;p&gt;DAOs are little democracies, and as such we need a voting scheme to do rule
changes whereby a threshold (e.g., 51%) decides what happens next. We have two
options, we can either count individuals as equal, or we can weight by amount of
funds contributed. We can do any threshold we like, it’s just “this many people
could steal the whole pot”.&lt;/p&gt;

&lt;p&gt;For this post, we’ll do the weighted by funds contributed because that feels
closer to what’s happening in Ethereum land. Unfortunately a couple components
around generated arbitrary weighted signatures&lt;sup id=&quot;fnref:frost&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:frost&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; just “aren’t quite there” or have
messy tradeoffs so we won’t consider those – yet. Instead we’ll just make a silly
limit: we will allow at most 24 participants&lt;sup id=&quot;fnref:combo&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:combo&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implementing-a-dao&quot;&gt;Implementing a DAO&lt;/h2&gt;

&lt;p&gt;First let’s define the basics. A DAO should have Members who each are ID’d by a
key and have an amount of votes.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Pool Members&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// map of all initial balances as PK to BTC&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// The current sequence number (for authenticating state updates)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;updatable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hold_vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Members can hold a vote on a proposal of some kind. Let’s do proposals
that can make payments, mint NFTs, or add some noobs:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// New Update message for generating a transaction from.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Serialize)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Payments&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// A mapping of public key in members to signed list of payouts with a fee rate.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Some purpose for this proposal, as a String.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Mint&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Make some NFTs&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Mint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SapioHostAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Add People&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BTreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// required...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StatefulArgumentsTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// helper for rust type system issue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default_coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatefulArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can implement the main logic of the DAO. We want it to compute keys for
the majority to rule, and we want it to allow a majority to vote on a Proposal.
Note how when we make a payment, unlike in the Payment Pool, we decrease all
member’s proportional ownership in the pool&lt;sup id=&quot;fnref:rat&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:rat&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;, so that new owners are not
disadvantaged. But we could change that, to time-weight how long members have
been part of the DAO as well, or give people ‘special voting weight’
disconnected from money added. It’s really up to whatever you want…&lt;/p&gt;

&lt;p&gt;We’ll implement the logic for each type of proposal (minting, adding, or paying).&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Sum Up all the balances&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// all signed the transaction!&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;majority_rules&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
            &lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// TODO: we should probably make guards return Result...&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;key_groups_to_clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compute_key_groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ppl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Well Formed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// This Function will create a proposed transaction that is safe to sign&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// given a list of data from participants.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[continuation(&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;web_api,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;guarded_by&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[Self::majority_rules]&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;coerce_args&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;default_coerce&quot;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hold_vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// don't allow empty updates.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minting_module&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// let's now compile a new 'mint' of the NFT&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContextualArguments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.network&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mint_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Mint_NFT_Trait_Version_0_1_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mint_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.and_then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;serde_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_contract_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map_err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.ok_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_nft_contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;noobs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.and_modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.or_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.funds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Proposal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// collect members with updated balances here&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;.fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_sat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spent&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_btc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.values_mut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.for_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.relative_votes&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;f64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// for each payment...&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// Send any leftover funds to a new pool&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_members&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// optional: we could commit to the reason somewhere in metadata &lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// e.g. a tapleaf branch... we don't do this here because meh.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.try_into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;tmpl&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;REGISTER!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dao&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lastly, we need some super special sneaky algorithm fun to implement signing authorities
based on majority value. As noted, special uses of FROST could replace this, or future
research on better weighted key protocols.&lt;/p&gt;

&lt;p&gt;For now, we limit ourselves to 25 keys so that compilation isn’t too slow. We can afford
having hundreds of thousands or millions of groups because of Taproot :).&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key_groups_to_clause&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clause&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.filter_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compute_key_groups&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.is_empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerminateCompilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// sort for stable ordering&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// The bitmasks for which keys to participate&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// BEGIN ALGORITHM:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// if we see a bit set out of range, we can stop.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_if_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// we know that 0 elements is invalid, we need up to el.len()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1u32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// get the first member of our permutation&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;element_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// if any bits are set in the failure zone stop&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fail_if_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// compute the sum of the elements in this mask&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
                &lt;span class=&quot;py&quot;&gt;.sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// this set is a candidate!&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// subtract the smallest value (this is why we sorted) -- if it&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// fails it is not a minimal set because there exists a passing&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// set without this element.&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// note: trailing zeros is guaranteed to be in bounds&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.trailing_zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// it did fail, so save it&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// get the next ct&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// Adapted from https://www.alexbowe.com/popcount-permutations/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Compute the lexicographically next bit permutation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Taken from http://graphics.stanford.edu/~seander/bithacks.html&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next_perm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// t gets v's least significant 0 bits set to 1&lt;/span&gt;
                              &lt;span class=&quot;c&quot;&gt;// Next set to 1 the most significant bit to change,&lt;/span&gt;
                              &lt;span class=&quot;c&quot;&gt;// set to 0 the least significant ones, and add the necessary 1 bits.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.wrapping_neg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.trailing_zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///    Generates first permutation with a given amount of set bits, which is&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///    used to generate the rest.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;element_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All done! Not too bad huh? I think you’re really getting the hang of this thing!&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;using-a-dao&quot;&gt;Using a DAO&lt;/h1&gt;

&lt;p&gt;Now that we have this DAO we can get together a group of people and share a UTXO.&lt;/p&gt;

&lt;p&gt;With that shared balance, we can get everyone in some kind of chat room and ‘govern’
what proposals folks want to vote on.&lt;/p&gt;

&lt;p&gt;In particular, I would be very excited to see DAOs emerge for funding Bitcoin
Developers.  This type of structure can potentially help folks communally
allocate capital. Often times the biggest barrier is finding deals that make
sense, and DAOs would enable you to share with a group of friends and they could
make decisions for you.&lt;/p&gt;

&lt;p&gt;It would even be possible to create DAOs on behalf of third parties and fund
them. For example, let’s say I get PKs for 10 devs I like and put a 10 BTC into
it and set the shares up so that there is a ‘leader’ with 30%, and the rest
split 70% of voting shares. The leader could just steal the money with another
21%, but would they? I hope not! Instead, they can vote on good things as
intended.  It’d also be possible for the DAO creator to embed an ‘oversight
comittee’ that can yank the funds if not being used.&lt;/p&gt;

&lt;p&gt;Minting NFTs is kind of a cool feature since anyone can see they came from the
DAO if they track the DAO’s state updates (conceivably these get published for
auditing). NFTs could be issued as medals of honor for devs who follow their
grants. Or, if you really like NFTs, they could be used to issue software
licenses in exchange for contributing funds to the DAO operators.&lt;/p&gt;

&lt;h1 id=&quot;does-this-need-ctv&quot;&gt;Does this need CTV?&lt;/h1&gt;

&lt;p&gt;Nope. Just a fancy multisig, right?&lt;/p&gt;

&lt;p&gt;Where CTV is useful is if we want to vote on proposals to put things into CTV
contracts, like subscriptions to developer grants, opening channels, etc.
Imagine the developer gets a contract where they get paid out every week, but
there is a auditing comittee that can be used to terminate the subscription and
return funds to the DAO if misbehavior is detected.&lt;/p&gt;

&lt;p&gt;While you don’t need CTV in the DAO backbone, it would help open up new use
cases.&lt;/p&gt;

&lt;p&gt;It would also be possible to add some ‘liveness’ smooth degradations of the DAO,
whereby half the majority (e.g., if majority is 50%, 25%) could vote that the
DAO is dead, and after a period of time for the majority recovery, distribute
the funds on a pre-comitted schedule.&lt;/p&gt;

&lt;p&gt;We don’t show that here, but it wouldn’t be too hard now would it?&lt;/p&gt;

&lt;h1 id=&quot;generalizing&quot;&gt;Generalizing&lt;/h1&gt;

&lt;p&gt;One could go ahead and implement a DAO trait that all DAOs could share and build
a common UX for managing DAOs with a wide variety of custom logic…&lt;/p&gt;

&lt;p&gt;It’d also be possible to have a DAO backbone which is a single UTXO, and have
other UTXOs ‘owned’ by the DAO that can get merged in later as a proposal. This
way contributions to the DAO don’t always require a state update from the DAO
itself.&lt;/p&gt;

&lt;p&gt;For future work :)&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:frost&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;FROST allows n-M threshold Schnorr signatures, which can turn into a weighted solution by making M the total value and each party have W amount of keys for their contribution. But this scales poorly because you need to exchange keys and signatures linear in the Amount, which is up to a 51-bit number. &lt;a href=&quot;#fnref:frost&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:combo&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;We are going to brute force all the N-N key combinations, so we pick a low number like 24 and things stay ‘small’ enough. &lt;a href=&quot;#fnref:combo&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rat&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;please please if you’re implementing this for real use rational types not floats. &lt;a href=&quot;#fnref:rat&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Welcome to day 25 of my Bitcoin Advent Calendar. You can see an index of all the posts here or subscribe at judica.org/join to get new posts in your inbox</summary></entry><entry><title type="html">POWSWAP: Oracle Free Bitcoin Hashrate Derivatives</title><link href="http://rubin.io/bitcoin/2021/12/21/advent-24/" rel="alternate" type="text/html" title="POWSWAP: Oracle Free Bitcoin Hashrate Derivatives" /><published>2021-12-21T00:00:00+00:00</published><updated>2021-12-21T00:00:00+00:00</updated><id>http://rubin.io/bitcoin/2021/12/21/advent-24</id><content type="html" xml:base="http://rubin.io/bitcoin/2021/12/21/advent-24/">&lt;p&gt;&lt;em&gt;Welcome to day 24 of my Bitcoin Advent Calendar. You can see an index of all
the posts &lt;a href=&quot;/advent21&quot;&gt;here&lt;/a&gt; or subscribe at
&lt;a href=&quot;https://judica.org/join&quot;&gt;judica.org/join&lt;/a&gt; to get new posts in your inbox&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today’s post is near and dear to my heart – years ago I put up an interest form
for &lt;a href=&quot;https://powswap.com&quot;&gt;powswap.com&lt;/a&gt;, but as I went down the rabbit hole I
realized how badly I wanted generic tooling to automate the building of these
which is partly what led to Sapio!&lt;/p&gt;

&lt;p&gt;So therefore it’s very exciting to show you the basics of powswap in Sapio. You
can see how bad the early version was
&lt;a href=&quot;https://gist.github.com/JeremyRubin/8bacafdb997c588ef2a203ffeb726b83&quot;&gt;here&lt;/a&gt;. If
you want to contrast life with Sapio and without.&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-powswap&quot;&gt;What is a Powswap?&lt;/h1&gt;

&lt;p&gt;The basic idea of Powswap is super simple. It is a contract that measures a
block surplus or deficit – a Block Delta Contract (BDC). A  BDC allows
counterparties to bet on statements like “at the end of 6 months, we will be +/-
1000 blocks against the current expected number of blocks”, and program a payoff
curve based on the binary outcome of that. The block delta should be – and this
is a matter for the analysts to price on and model – correlated with changes in
hashrate.&lt;/p&gt;

&lt;h3 id=&quot;who-the-f-cares&quot;&gt;WHO THE F CARES&lt;/h3&gt;

&lt;p&gt;Well imagine you are about to buy a new fancy mining rig to mine with. But you
have a moment of doubt – what if everyone else is doing that right now too?&lt;/p&gt;

&lt;p&gt;You could buy hashrate derivatives where you win money if the hashrate increases
and lose if it stays the same.&lt;/p&gt;

&lt;p&gt;This would de-risk your investment in mining.&lt;/p&gt;

&lt;p&gt;You can also lever-up and increase profit if you’re adding a lot of hashrate,
doubling down that hashrate goes up, but let’s not entertain the degens shall
we.&lt;/p&gt;

&lt;h3 id=&quot;ok-ok-how-can-i-do-it&quot;&gt;OK OK How can I do it?&lt;/h3&gt;

&lt;p&gt;One could imagine making a BDC based on the Oracle system we saw in yesterday’s
post.  But the magic of Powswap is that we will do this without using any oracle
whatsoever, just measuring the blocks directly.&lt;/p&gt;

&lt;p&gt;How do we do this?&lt;/p&gt;

&lt;p&gt;The answer is actually really simple. Suppose Alice wants to get 1 Bitcoin if
100 blocks are missing at the end of the week (the 28th, let’s say expected 1000
blocks), and Bob wants to win 1 Bitcoin if they are actually there.&lt;/p&gt;

&lt;p&gt;All we have to do is have Alice and Bob agree to a multisig to deposit 0.5 BTC
each to, and then pre-sign from it two transactions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the date is the 28th at noon and the height is greater than 1000, Bob gets paid 1 BTC&lt;/li&gt;
  &lt;li&gt;If the date the date is the 28th at noon + 8 hours, Alice gets paid 1 BTC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s think it through:&lt;/p&gt;

&lt;p&gt;Suppose that Alice is right and blocks are 100 short by
noon.&lt;/p&gt;

&lt;p&gt;In the next 8 hours, only 48 blocks should be mined (and probably less, if the
hashrate has actually decreased).&lt;/p&gt;

&lt;p&gt;After that point, Alice has 8 more hours (again, probably more if hashrate
actually decreased) to broadcast and claim her BTC.&lt;/p&gt;

&lt;p&gt;Suppose that Bob is right and blocks reach 1000 at noon. Bob has 8 hours to
claim the BTC before Alice can.&lt;/p&gt;

&lt;h3 id=&quot;metastability&quot;&gt;Metastability&lt;/h3&gt;

&lt;p&gt;Where this is a bit wonky is that the result is metastable. Let’s assume that
neither Alice nor Bob is right: The deficit is 50 blocks short.&lt;/p&gt;

&lt;p&gt;At noon, Bob cannot claim. But in 8 hours he can! But also in 8 hours Alice can
claim too.&lt;/p&gt;

&lt;p&gt;So who wins?&lt;/p&gt;

&lt;p&gt;The answer is either! Using a POWSWAP you either want to be really right or
really wrong.&lt;/p&gt;

&lt;p&gt;We’ll see some cool results around why this might not be a huge deal later.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Let’s flip the powswap around now, for a surplus of blocks. Bob thinks the
blocks will be 1000, Alice thinks 1100.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If the date is the 28th at noon + 8 hours, Bob gets paid 1 BTC&lt;/li&gt;
  &lt;li&gt;If the date the date is the 28th at noon and there are 1100 blocks, Alice gets paid 1 BTC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Under this model if Alice is right there should be that many blocks by that
time, and if Bob is right there should not be and a resaonable amount of time
later Bob can claim.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It’s a bit harder to see, but we can even implement this logic more simply as just:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;If we reach +1 week, give Bob 1 BTC&lt;/li&gt;
  &lt;li&gt;If we reach +1100 blocks, give Alice 1 BTC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, if a week goes by first without seeing 1100 blocks, Bob can claim. If the
1100 blocks show well before the week is up, then Alice can claim. If neither
are really right then it’s metastable and either could win.&lt;/p&gt;

&lt;h2 id=&quot;we-are-not-going-there&quot;&gt;We are not going there!&lt;/h2&gt;

&lt;p&gt;There are a myriad of different combinations of locktimes and heights that you
can use to do this correctly, we won’t focus too much on that in this post, and
we’ll let our contract users decide what parameters they want.  Let the analysts
figure out what the right combo of locktimes and stuff is to hedge different
risks. They should get paid for something, right?&lt;/p&gt;

&lt;p&gt;One of the wrinkles is that the less time you have in your contract, the more
metastable it is.  The more time you have, expecially across difficulty
adjustments, the more the deficits can be erased.&lt;/p&gt;

&lt;h1 id=&quot;implementing-a-powswap&quot;&gt;Implementing a Powswap&lt;/h1&gt;

&lt;h2 id=&quot;is-ctv-required&quot;&gt;Is CTV Required?&lt;/h2&gt;

&lt;p&gt;In the example I gave above, it is not! However, if you have CTV then one party
can unilaterally open a hashrate derivative for other parties, and that matters
quite a lot!&lt;/p&gt;

&lt;p&gt;This means that when we do implement it, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;then&lt;/code&gt; because if you
want the pre-signature version you can use CTV Emulators.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;First we’ll start by writing some code to be able to describe the locktimes
under which some outcome is considered “resolved”. We’ll write a container type
(the data we actually need) and then we’ll write a verifier type that makes
for a convenient API for human input. It’s kind of gross, so you can skip
the verifier type code and just imagine you put in the correct parameters.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// `ContractVariant` ensures that we either set a Relative Height and Absolute&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Time or a Relative Time and Absolute Height, the two valid combinations, or&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// just one.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Note these are unlocking conditions for each participant.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// Validity is ensured through smart constructor&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Copy)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[serde(try_from&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ValidContractVariant&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;/// In order to test for coherence here, we should convert&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// ValidContractVariant to ContractVariant.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// The coherence rules should match one ruleset of:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// - a single type of TimeLock (Relative Height, Relative Time, Absolute Time,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///   Absolute Height)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// - a mixed TimeLock of just Relative Height/Absolute Time or just Relative&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;///   Time/Absolute Height&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ValidContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnyTimeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TryFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidContractVariant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContractVariant&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vcv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValidContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vcv&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.filter_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vcv&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.filter_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;#[derive(Debug)]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Display&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_rh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Must have some timelock set!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_ah&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_ah&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Incoherent Absolute Timelocks (mixed height/time)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.max_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyRelTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.max_by_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AnyAbsTimeLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;matches!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Must have some timelock set!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_rh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_rt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LocalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;Must mix {Relative,Absolute} Height and Absolute time!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContractVariant&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyRelTimeLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;RelTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyAbsTimeLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap_or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;AbsHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that out of the way, let’s now define our contract data:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Instructions for a Payment from an outcome&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmountU64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A `Outcome` is a contract where&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Outcome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Variant&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// if the base is time or height for the relative leg.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unlocks_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContractVariant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Outcome&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// Payments to make (should be &amp;gt;= 1)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/// A `PowSwap` is a contract where&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(JsonSchema,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Deserialize,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Clone)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowSwap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Parties&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outcomes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/// # Cooperate Key&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;coop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublicKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowSwap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;declare!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it’s pretty simple. We just need a set of keys to ‘opt out’ of
the on-chain execution, and a set of outcomes and their unlocking conditions.
We can pay an arbitrary number of parties.&lt;/p&gt;

&lt;p&gt;Now to finish, let’s implement the logic. It’s really simple, we just create the
(2) transactions and assign the sequences/locktimes properly.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowSwap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[guard]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cooperate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;And&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.coop&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Clause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_payoffs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompilationError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pays&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payments&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.add_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sats&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[then]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;payoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcomes&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base_ctx&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.derive_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.make_payoffs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.outcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.unlocks_if&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.set_lock_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.unlocks_if&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;.into&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.into_iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That wasn’t so bad now, was it?&lt;/p&gt;

&lt;h1 id=&quot;using-powswap&quot;&gt;Using PowSwap&lt;/h1&gt;

&lt;p&gt;We already said we’re not going to analyze the profit of these contracts, but I
want to give a couple cool ways to use these.&lt;/p&gt;

&lt;h2 id=&quot;when-to-cooperate&quot;&gt;When to Cooperate?&lt;/h2&gt;

&lt;p&gt;One thing that I think would be important to settling a hashrate derivative would be
to set it for, say, 6 months forecast and then try to roll the strategy at 3 months cooperatively.&lt;/p&gt;

&lt;p&gt;This way you don’t have trouble with metastability as you and your counterparty
can update forecasts and re-enter the contract, or go separate ways.&lt;/p&gt;

&lt;h2 id=&quot;take-it-to-the-limit&quot;&gt;TAKE IT TO THE LIMIT&lt;/h2&gt;

&lt;p&gt;Well what if instead of settling on-chain, you nested these in LN channels? And
then every microsecond you don’t see a block being advertised and broadcast, you
update your probabilities and try to adjust with your counterparty. It becomes
pretty neat becuase you essentially make a hashrate perpetual where if your
counterparty dies then you settle on-chain (if they’re really dead, you just
win), but you can update your forecasts on whatever frequency you want. All
trustlessly.&lt;/p&gt;

&lt;h3 id=&quot;the-information-market-for-relaying&quot;&gt;The Information Market for Relaying&lt;/h3&gt;

&lt;p&gt;This opens the door for HFT-ing information about the rate of block production.
Knowing a block is mined and getting it relayed to you before your counterparty
gives you an edge in trading.&lt;/p&gt;

&lt;p&gt;Maybe this pays for really really good block relaying infrastructure?&lt;/p&gt;

&lt;h2 id=&quot;galaxy-brain-me&quot;&gt;GALAXY BRAIN ME&lt;/h2&gt;

&lt;p&gt;Hey, it’s me. Your old friend Decentralized Coordination Free Mining Pools. What
if we made – using CTV – the channels/payouts by default resolve into some sort
of hashrate future, and we had an automated hedging market maker that could incorporate
your desired side of a trade from old hash shares into opening new positions for you every block.
If it was in channels you could immediately turn these into hashrate perps.&lt;/p&gt;

&lt;h3 id=&quot;metastability-1&quot;&gt;Metastability&lt;/h3&gt;
&lt;p&gt;If you’re a miner and you mine, say, 2 blocks a day, then you can usually expect
to be able to settle your own metastable hashrate derivatives as long as the
metastable window isn’t smaller than ~12 hours. This means that while normie
pleb users might struggle with closing their derivatives, miner-to-miner
hashrate derivatives should be actually pretty safe if you stay in your
bounds.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Can we really do this? How effective is it? Honestly I have no idea I just think
it’s mind-blowing.&lt;/p&gt;

&lt;h2 id=&quot;gimme-all-my-options&quot;&gt;Gimme all My Options&lt;/h2&gt;

&lt;p&gt;This idea composes beautifully with the options we saw yesterday. What if I want
the &lt;em&gt;option&lt;/em&gt; for the next week to open up a 6 month hashrate contract with you?&lt;/p&gt;

&lt;p&gt;Just toss it into an Expiring Under Funded Option contract and you got it. And
because we represented these as Dutch Auctionable NFTs, you can advertise the
position you’re willing to open to the network and take the best offer for this
option.&lt;/p&gt;

&lt;p&gt;Sapio composes. Legit forreal.&lt;/p&gt;

&lt;p&gt;DeFi is coming to Bitcoin.&lt;/p&gt;

&lt;p&gt;And it’s going to help with securing the base layer of Bitcoin by permitting
trustless financialization of investments in hashrate.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Have a great day. P.s. now is a good time to join
&lt;a href=&quot;https://utxos.org/signals&quot;&gt;utxos.org/signals&lt;/a&gt; if you think CTV is a great next
step in Bitcoin Development’s journey.&lt;/p&gt;</content><author><name>Jeremy Rubin</name></author><category term="bitcoin" /><summary type="html">Welcome to day 24 of my Bitcoin Advent Calendar. You can see an index of all the posts here or subscribe at judica.org/join to get new posts in your inbox</summary></entry></feed>